import * as React from 'react';
import { SelectValue } from '../select/Select';
import { BaseInputProps, BaseInputState, BaseInput } from '../base/input/BaseInput';
import { OmitFormContext } from '../form/FormContext';
import { InnerRefProps } from './../../types/InnerRefProps';
export interface MoneyWithCurrency {
    value: number;
    currency: SelectValue;
}
export interface MoneyRawProps extends BaseInputProps<never> {
    onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;
    onPricesChange: (prices: MoneyWithCurrency[]) => void;
    allowMultiple?: boolean;
    currencies: SelectValue[];
    prices: MoneyWithCurrency[];
}
export declare type MoneyProps = OmitFormContext<MoneyRawProps> & InnerRefProps<MoneyRaw>;
export interface MoneyState extends BaseInputState {
}
export declare class MoneyRaw extends BaseInput<MoneyRawProps, MoneyState, never> {
    static defaultProps: {
        disabled?: boolean;
        className?: string;
        label?: string | JSX.Element;
        tooltip?: string | JSX.Element;
        tooltipProps?: any;
        value?: string;
        onChange?: (e: React.ChangeEvent<never>, isValid: boolean) => void;
        required?: boolean;
        customValidators?: import("../../validators/base").IBaseValidator[];
        validators?: ("number" | "email" | "latitude" | "longitude" | "url")[];
        noValidate?: boolean;
        validationName?: string;
        touchOn?: "focus" | "blur";
        ignoreContext?: boolean;
        onTheFlightValidate?: (value: string) => boolean;
        onFocus?: (e: React.SyntheticEvent<{}>) => void;
        onBlur?: () => void;
        title?: string | JSX.Element;
        onKeyDown?: (e: React.KeyboardEvent<HTMLElement>) => void;
        errors?: (string | JSX.Element)[];
        onErrorsChanged?: (errors: (string | JSX.Element)[]) => void;
        showValidation?: boolean;
        reRendersWhenContextChanges?: boolean;
    } & import("../form/FormContext").FormContextProps & {
        type: string;
        allowMultiple: boolean;
    };
    constructor(props: MoneyRawProps);
    render(): JSX.Element;
    private onCurrencyChanged;
    private onTheFlightValidate;
    private onPriceChanged;
    private removePriceClick;
    private addPriceClick;
    private onFocus;
    private onBlur;
}
export declare const Money: React.StatelessComponent<MoneyProps>;
export default Money;
