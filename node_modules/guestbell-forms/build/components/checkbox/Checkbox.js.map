{"version":3,"sources":["../../../src/lib/components/checkbox/Checkbox.tsx"],"names":["classNames","require","CheckboxRaw","props","state","Object","assign","checked","isValid","required","errors","handleChecked","bind","subscribeSelf","newProps","setState","containerClassName","getValidationClass","className","Boolean","label","title","containerRef","renderInput","renderDefaultValidation","renderLabel","e","onChecked","setValid","setInvalid","getDisabled","handleBlur","handleFocus","BaseInput","defaultProps","Checkbox"],"mappings":"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","sourcesContent":["ï»¿// Libs\r\nimport * as React from 'react';\r\n\r\n// Misc\r\nimport InputGroup from '../inputGroup/InputGroup';\r\nimport { BaseInputProps, BaseInput, BaseInputState } from '../base/input/BaseInput';\r\nvar classNames = require('classnames');\r\nimport { withFormContext } from '../form/withFormContext';\r\nimport { OmitFormContext } from '../form/FormContext';\r\nimport { InnerRefProps } from './../../types/InnerRefProps';\r\n\r\nexport interface CheckboxRawProps extends BaseInputProps<HTMLInputElement> {\r\n  onChecked?: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  onChange?: never;\r\n  value?: never;\r\n  type?: string;\r\n  checked?: boolean;\r\n}\r\n\r\nexport type CheckboxProps = OmitFormContext<CheckboxRawProps> & InnerRefProps<CheckboxRaw>;\r\n\r\nexport interface CheckboxState extends BaseInputState {\r\n  checked: boolean;\r\n}\r\n\r\nexport class CheckboxRaw extends BaseInput<CheckboxRawProps, CheckboxState, HTMLInputElement>  {\r\n  public static defaultProps = Object.assign({}, BaseInput.defaultProps, { checked: false });\r\n\r\n  constructor(props: CheckboxRawProps) {\r\n    super(props, false);\r\n    this.state = Object.assign(this.state, {\r\n      checked: props.checked,\r\n      isValid: props.required ? props.checked : true,\r\n      errors: props.required && !props.checked ? ['Required'] : []\r\n    });\r\n    this.handleChecked = this.handleChecked.bind(this);\r\n    this.subscribeSelf(props);\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: CheckboxProps) {\r\n    if (newProps.checked !== this.state.checked) {\r\n      this.setState({ checked: newProps.checked });\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    const containerClassName = classNames([\r\n      'input__base checkbox-input',\r\n      this.getValidationClass(),\r\n      this.props.className,\r\n      { ['checkbox-input--with-label']: Boolean(this.props.label) }\r\n    ]);\r\n    return (\r\n      <InputGroup title={this.props.title}>\r\n        <div\r\n          className={containerClassName}\r\n          ref={this.containerRef}\r\n        >\r\n          {!this.props.label && this.renderInput()}\r\n          {this.renderDefaultValidation()}\r\n          {this.props.label && <label>{this.renderInput()}{this.renderLabel()}</label>}\r\n        </div>\r\n      </InputGroup>\r\n    );\r\n  }\r\n\r\n  private handleChecked(e: React.ChangeEvent<HTMLInputElement>) {\r\n    this.props.onChecked && this.props.onChecked(e);\r\n    this.setState({ checked: !this.state.checked });\r\n    if (!this.state.checked) {\r\n      this.setValid();\r\n    } else {\r\n      if (this.props.required) {\r\n        this.setInvalid(['Required']);\r\n      }\r\n    }\r\n  }\r\n\r\n  private renderInput() {\r\n    return (\r\n      <input\r\n        disabled={this.getDisabled()}\r\n        type=\"checkbox\"\r\n        required={this.props.required}\r\n        checked={this.state.checked}\r\n        onChange={this.handleChecked}\r\n        onBlur={this.handleBlur}\r\n        onFocus={this.handleFocus}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport const Checkbox = withFormContext<CheckboxRawProps, CheckboxProps>(CheckboxRaw);\r\n\r\nexport default Checkbox;\r\n"],"file":"Checkbox.js"}