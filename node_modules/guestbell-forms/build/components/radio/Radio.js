"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Radio = exports.RadioRaw = void 0;

var React = _interopRequireWildcard(require("react"));

var _BaseInput2 = require("../base/input/BaseInput");

var _withFormContext = require("../form/withFormContext");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var RadioRaw =
/*#__PURE__*/
function (_BaseInput) {
  _inherits(RadioRaw, _BaseInput);

  function RadioRaw(props) {
    var _this;

    _classCallCheck(this, RadioRaw);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(RadioRaw).call(this, props));
    _this.onChecked = _this.onChecked.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }

  _createClass(RadioRaw, [{
    key: "render",
    value: function render() {
      return React.createElement("div", {
        className: "input__group radio-input ".concat(this.getValidationClass(), " ").concat(this.props.className ? this.props.className : ''),
        ref: this.containerRef
      }, !this.props.label && this.renderInput(), this.props.label && React.createElement("label", null, this.renderInput(), this.props.label));
    }
  }, {
    key: "renderInput",
    value: function renderInput() {
      return React.createElement("input", {
        disabled: this.getDisabled(),
        name: this.props.name,
        value: this.props.value,
        type: "radio",
        required: this.props.required,
        checked: this.props.value === this.props.result,
        onChange: this.onChecked,
        onBlur: this.handleBlur,
        onFocus: this.handleFocus
      });
    }
  }, {
    key: "onChecked",
    value: function onChecked(e) {
      // e.preventDefault();
      this.props.onChecked && this.props.onChecked(e.target.value);
    }
  }]);

  return RadioRaw;
}(_BaseInput2.BaseInput);

exports.RadioRaw = RadioRaw;

_defineProperty(RadioRaw, "defaultProps", Object.assign({}, _BaseInput2.BaseInput.defaultProps, {}));

var Radio = (0, _withFormContext.withFormContext)(RadioRaw);
exports.Radio = Radio;
var _default = Radio;
exports.default = _default;
//# sourceMappingURL=Radio.js.map