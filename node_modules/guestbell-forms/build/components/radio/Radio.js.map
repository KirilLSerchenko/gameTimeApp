{"version":3,"sources":["../../../src/lib/components/radio/Radio.tsx"],"names":["RadioRaw","props","onChecked","bind","getValidationClass","className","containerRef","label","renderInput","getDisabled","name","value","required","result","handleBlur","handleFocus","e","target","BaseInput","Object","assign","defaultProps","Radio"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;IAmBaA,Q;;;;;AAGX,oBAAYC,KAAZ,EAAkC;AAAA;;AAAA;;AAChC,kFAAMA,KAAN;AACA,UAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeC,IAAf,uDAAjB;AAFgC;AAGjC;;;;6BAEe;AACd,aACE;AACE,QAAA,SAAS,qCAA8B,KAAKC,kBAAL,EAA9B,cAA2D,KAAKH,KAAL,CAAWI,SAAX,GAAuB,KAAKJ,KAAL,CAAWI,SAAlC,GAA8C,EAAzG,CADX;AAEE,QAAA,GAAG,EAAE,KAAKC;AAFZ,SAIG,CAAC,KAAKL,KAAL,CAAWM,KAAZ,IAAqB,KAAKC,WAAL,EAJxB,EAKG,KAAKP,KAAL,CAAWM,KAAX,IAAoB,mCAAQ,KAAKC,WAAL,EAAR,EAA4B,KAAKP,KAAL,CAAWM,KAAvC,CALvB,CADF;AASD;;;kCAEqB;AACpB,aACE;AACE,QAAA,QAAQ,EAAE,KAAKE,WAAL,EADZ;AAEE,QAAA,IAAI,EAAE,KAAKR,KAAL,CAAWS,IAFnB;AAGE,QAAA,KAAK,EAAE,KAAKT,KAAL,CAAWU,KAHpB;AAIE,QAAA,IAAI,EAAC,OAJP;AAKE,QAAA,QAAQ,EAAE,KAAKV,KAAL,CAAWW,QALvB;AAME,QAAA,OAAO,EAAE,KAAKX,KAAL,CAAWU,KAAX,KAAqB,KAAKV,KAAL,CAAWY,MAN3C;AAOE,QAAA,QAAQ,EAAE,KAAKX,SAPjB;AAQE,QAAA,MAAM,EAAE,KAAKY,UARf;AASE,QAAA,OAAO,EAAE,KAAKC;AAThB,QADF;AAaD;;;8BAEiBC,C,EAAwC;AACxD;AACA,WAAKf,KAAL,CAAWC,SAAX,IAAwB,KAAKD,KAAL,CAAWC,SAAX,CAAqBc,CAAC,CAACC,MAAF,CAASN,KAA9B,CAAxB;AACD;;;;EAvC2BO,qB;;;;gBAAjBlB,Q,kBACkBmB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,sBAAUG,YAA5B,EAA0C,EAA1C,C;;AAyCxB,IAAMC,KAAK,GAAG,sCAA2CtB,QAA3C,CAAd;;eAEQsB,K","sourcesContent":["ï»¿// Libs\r\nimport * as React from 'react';\r\nimport { BaseInputProps, BaseInputState, BaseInput } from '../base/input/BaseInput';\r\nimport { withFormContext } from '../form/withFormContext';\r\nimport { OmitFormContext } from '../form/FormContext';\r\nimport { InnerRefProps } from './../../types/InnerRefProps';\r\n\r\n// Misc\r\n\r\nexport interface RadioRawProps extends BaseInputProps<HTMLInputElement> {\r\n  onChange?: never;\r\n  onChecked: (value: string) => void;\r\n  result: string;\r\n  value: string;\r\n  name: string;\r\n}\r\n\r\nexport type RadioProps = OmitFormContext<RadioRawProps> & InnerRefProps<RadioRaw>;\r\n\r\nexport interface RadioState extends BaseInputState {\r\n}\r\n\r\nexport class RadioRaw extends BaseInput<RadioRawProps, RadioState, HTMLInputElement>  {\r\n  public static defaultProps = Object.assign({}, BaseInput.defaultProps, {});\r\n\r\n  constructor(props: RadioRawProps) {\r\n    super(props);\r\n    this.onChecked = this.onChecked.bind(this);\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div\r\n        className={`input__group radio-input ${this.getValidationClass()} ${this.props.className ? this.props.className : ''}`}\r\n        ref={this.containerRef}\r\n      >\r\n        {!this.props.label && this.renderInput()}\r\n        {this.props.label && <label>{this.renderInput()}{this.props.label}</label>}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderInput() {\r\n    return (\r\n      <input\r\n        disabled={this.getDisabled()}\r\n        name={this.props.name}\r\n        value={this.props.value}\r\n        type=\"radio\"\r\n        required={this.props.required}\r\n        checked={this.props.value === this.props.result}\r\n        onChange={this.onChecked}\r\n        onBlur={this.handleBlur}\r\n        onFocus={this.handleFocus}\r\n      />\r\n    );\r\n  }\r\n\r\n  private onChecked(e: React.ChangeEvent<HTMLInputElement>) {\r\n    // e.preventDefault();\r\n    this.props.onChecked && this.props.onChecked(e.target.value);\r\n  }\r\n}\r\n\r\nexport const Radio = withFormContext<RadioRawProps, RadioProps>(RadioRaw);\r\n\r\nexport default Radio;\r\n"],"file":"Radio.js"}