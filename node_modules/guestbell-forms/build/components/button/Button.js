"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Button = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactTippy = require("react-tippy");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var Ink = require('react-ink');

var classNames = require('classnames'); // Misc


var DefaultButtonComponent = function DefaultButtonComponent(props) {
  return React.createElement("button", _extends({}, props.buttonProps ? props.buttonProps : {}, {
    role: "button",
    className: props.className,
    onClick: props.onClick
  }), props.children);
};

var Button =
/*#__PURE__*/
function (_React$PureComponent) {
  _inherits(Button, _React$PureComponent);

  function Button(props) {
    var _this;

    _classCallCheck(this, Button);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Button).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "preventMultipleClick", false);

    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }

  _createClass(Button, [{
    key: "render",
    value: function render() {
      var btnClassName = classNames(['guestbell-btn', this.getButtonClassName(), this.props.className, _defineProperty({}, 'guestbell-btn--disabled', this.props.disabled), _defineProperty({}, 'guestbell-btn--circular', this.props.circular), _defineProperty({}, 'guestbell-btn--small', this.props.small), _defineProperty({}, 'guestbell-btn--no-shadow', this.props.noShadow), _defineProperty({}, 'guestbell-btn--blank', this.props.blank), _defineProperty({}, 'guestbell-btn--outlined', this.props.outlined), _defineProperty({}, 'guestbell-btn--dropdown', this.props.dropdown), _defineProperty({}, 'guestbell-btn--icon', this.props.icon), _defineProperty({}, 'guestbell-btn--hero', this.props.hero)]);
      var button = React.createElement(this.props.Component, {
        onClick: this.handleClick,
        buttonProps: this.props.buttonProps,
        className: btnClassName
      }, !this.props.noRipples && !this.props.disabled && Ink && React.createElement(Ink, null), this.props.children);

      if (this.props.tooltip) {
        return React.createElement(_reactTippy.Tooltip, _extends({
          html: this.props.tooltip,
          position: "bottom",
          trigger: "mouseenter",
          interactive: true,
          animateFill: false
        }, this.props.tooltipProps), button);
      }

      return button;
    }
  }, {
    key: "handleClick",
    value: function handleClick(e) {
      var _this2 = this;

      e.preventDefault();

      if (!this.preventMultipleClick) {
        !this.props.disabled && this.props.onClick && this.props.onClick(e);

        if (this.props.disableAfterClickMs !== 0) {
          this.preventMultipleClick = true;
          setTimeout(function () {
            _this2.preventMultipleClick = false;
          }, this.props.disableAfterClickMs);
        }
      }
    }
  }, {
    key: "getButtonClassName",
    value: function getButtonClassName() {
      return this.props.type && 'guestbell-btn-' + this.props.type;
    }
  }]);

  return Button;
}(React.PureComponent);

exports.Button = Button;

_defineProperty(Button, "defaultProps", {
  disabled: false,
  className: '',
  onClick: function onClick() {
    return null;
  },
  circular: false,
  noRipples: false,
  small: false,
  disableAfterClickMs: 500,
  Component: DefaultButtonComponent,
  buttonProps: {
    type: 'button'
  },
  type: 'none'
});

var _default = Button;
exports.default = _default;
//# sourceMappingURL=Button.js.map