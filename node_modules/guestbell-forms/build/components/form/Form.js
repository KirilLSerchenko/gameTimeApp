"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Form = void 0;

var React = _interopRequireWildcard(require("react"));

var _FormContext = require("./FormContext");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Form =
/*#__PURE__*/
function (_React$PureComponent) {
  _inherits(Form, _React$PureComponent);

  function Form(props) {
    var _this;

    _classCallCheck(this, Form);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Form).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onSubmit", function (e) {
      e.preventDefault();
      _this.props.onSubmit && _this.props.onSubmit();
    });

    _this.subscribe = _this.subscribe.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.unSubscribe = _this.unSubscribe.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.updateCallback = _this.updateCallback.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.disableComponents = _this.disableComponents.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.enableComponents = _this.enableComponents.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.state = {
      contextState: {
        subscribe: _this.subscribe,
        unSubscribe: _this.unSubscribe,
        isFormValid: true,
        updateCallback: _this.updateCallback,
        disableComponents: _this.disableComponents,
        enableComponents: _this.enableComponents,
        components: {}
      }
    };
    return _this;
  }

  _createClass(Form, [{
    key: "disableComponents",
    value: function disableComponents() {
      var components = _objectSpread({}, this.state.contextState.components, this.props.extraComponents);

      Object.keys(components).forEach(function (key) {
        var component = components[key];
        component && component.componentApi && component.componentApi.disableComponent && component.componentApi.disableComponent();
      });
    }
  }, {
    key: "enableComponents",
    value: function enableComponents() {
      var components = _objectSpread({}, this.state.contextState.components, this.props.extraComponents);

      Object.keys(components).forEach(function (key) {
        var component = components[key];
        component && component.componentApi && component.componentApi.enableComponent && component.componentApi.enableComponent();
      });
    }
  }, {
    key: "touchAll",
    value: function touchAll() {
      var components = _objectSpread({}, this.state.contextState.components, this.props.extraComponents);

      Object.keys(components).forEach(function (key) {
        var component = components[key];
        component && component.componentApi && component.componentApi.touch && component.componentApi.touch();
      });
    }
  }, {
    key: "unTouchAll",
    value: function unTouchAll() {
      var components = _objectSpread({}, this.state.contextState.components, this.props.extraComponents);

      Object.keys(components).forEach(function (key) {
        var component = components[key];
        component && component.componentApi && component.componentApi.unTouch && component.componentApi.unTouch();
      });
    }
  }, {
    key: "render",
    value: function render() {
      return React.createElement("form", {
        noValidate: true,
        role: "form",
        className: "input__form validation-form ".concat(this.props.className ? this.props.className : ''),
        onSubmit: this.onSubmit
      }, React.createElement(_FormContext.FormContextProvider, {
        value: this.mergeContext()
      }, this.props.children));
    }
  }, {
    key: "mergeContext",
    value: function mergeContext() {
      if (!this.props.extraComponents) {
        return this.state.contextState;
      }

      var isFormValid = this.state.contextState.isFormValid && this.getIsFormValid(this.props.extraComponents);
      return _objectSpread({}, this.state.contextState, {
        components: _objectSpread({}, this.state.contextState.components, this.props.extraComponents),
        isFormValid: isFormValid
      });
    }
  }, {
    key: "subscribe",
    value: function subscribe(componentId, componentState) {
      var _this2 = this;

      if (componentId) {
        this.setState(function (previousState) {
          var components = Object.assign({}, previousState.contextState.components);

          if (componentState) {
            components[componentId] = componentState;
          }

          var isFormValid = _this2.getIsFormValid(components);

          return {
            contextState: _objectSpread({}, previousState.contextState, {
              components: components,
              isFormValid: isFormValid
            })
          };
        });
      }
    }
  }, {
    key: "unSubscribe",
    value: function unSubscribe(componentId) {
      var _this3 = this;

      if (componentId) {
        this.setState(function (previousState) {
          var components = Object.assign({}, previousState.contextState.components);
          delete components[componentId];

          var isFormValid = _this3.getIsFormValid(components);

          return {
            contextState: _objectSpread({}, previousState.contextState, {
              components: components,
              isFormValid: isFormValid
            })
          };
        });
      }
    }
  }, {
    key: "getIsFormValid",
    value: function getIsFormValid() {
      var components = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state.contextState.components;
      var initialValid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var isFormValid = initialValid;
      Object.keys(components).forEach(function (key) {
        var component = components[key];

        if (component && component.validation && !component.validation.isValid) {
          isFormValid = false;
        }
      });
      return isFormValid;
    }
  }, {
    key: "updateCallback",
    value: function updateCallback(componentId, componentState) {
      var _this4 = this;

      this.setState(function (previousState) {
        var components = Object.assign({}, previousState.contextState.components);
        var previousComponent = components[componentId];

        if (componentState && previousComponent) {
          components[componentId] = _objectSpread({}, previousComponent, componentState, {
            validation: _objectSpread({}, previousComponent.validation, componentState.validation)
          });
        }

        var isFormValid = _this4.getIsFormValid(components);

        return {
          contextState: _objectSpread({}, _this4.state.contextState, {
            components: components,
            isFormValid: isFormValid
          })
        };
      });
    }
  }]);

  return Form;
}(React.PureComponent);

exports.Form = Form;

_defineProperty(Form, "defaultProps", {
  noValidate: false,
  showExpandAll: true
});

var _default = Form;
exports.default = _default;
//# sourceMappingURL=Form.js.map