import * as React from 'react';
import { ValidationError, ComponentApi } from '../base/input';
import { Omit, DeepPartial } from '../utils/Typescript';
export declare type OmitFormContext<P extends FormContextProps> = Omit<P, 'formContext'>;
export interface FormComponentValidationContextState {
    isValid: boolean;
    errors: ValidationError[];
    name: JSX.Element | string;
}
export interface FormComponentContextState {
    validation: FormComponentValidationContextState;
    componentApi: ComponentApi;
}
export interface FormContextProps {
    formContext: FormContextState;
}
export declare type ComponentsDict = {
    [componentId: string]: FormComponentContextState;
};
export interface FormContextState {
    subscribe: (componentId: string, componentState: FormComponentContextState) => void;
    unSubscribe: (componentId: string) => void;
    isFormValid: boolean;
    updateCallback: (componentId: string, newComponentState: DeepPartial<FormComponentContextState>) => void;
    disableComponents: () => void;
    enableComponents: () => void;
    components: ComponentsDict;
}
export declare const FormContextProvider: React.ComponentType<React.ProviderProps<FormContextState>>;
export declare const FormContextConsumer: React.ComponentType<React.ConsumerProps<FormContextState>>;
