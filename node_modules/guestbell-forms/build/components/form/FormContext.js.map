{"version":3,"sources":["../../../src/lib/components/form/FormContext.ts"],"names":["FormContext","React","createContext","undefined","FormContextProvider","Provider","FormContextConsumer","Consumer"],"mappings":";;;;;;;AAAA;;;;AAiCA,IAAMA,WAAW,GAAGC,KAAK,CAACC,aAAN,CAAkDC,SAAlD,CAApB;AACO,IAAMC,mBAAmB,GAAGJ,WAAW,CAACK,QAAxC;;AACA,IAAMC,mBAAmB,GAAGN,WAAW,CAACO,QAAxC","sourcesContent":["import * as React from 'react';\r\nimport { ValidationError, ComponentApi } from '../base/input';\r\nimport { Omit, DeepPartial } from '../utils/Typescript';\r\n\r\nexport type OmitFormContext<P extends FormContextProps> = Omit<P, 'formContext'>;\r\n\r\nexport interface FormComponentValidationContextState {\r\n  isValid: boolean;\r\n  errors: ValidationError[];\r\n  name: JSX.Element | string;\r\n}\r\n\r\nexport interface FormComponentContextState {\r\n  validation: FormComponentValidationContextState;\r\n  componentApi: ComponentApi;\r\n}\r\n\r\nexport interface FormContextProps {\r\n  formContext: FormContextState;\r\n}\r\n\r\nexport type ComponentsDict = { [componentId: string]: FormComponentContextState };\r\n\r\nexport interface FormContextState {\r\n  subscribe: (componentId: string, componentState: FormComponentContextState) => void;\r\n  unSubscribe: (componentId: string) => void;\r\n  isFormValid: boolean;\r\n  updateCallback: (componentId: string, newComponentState: DeepPartial<FormComponentContextState>) => void;\r\n  disableComponents: () => void;\r\n  enableComponents: () => void;\r\n  components: ComponentsDict;\r\n}\r\n\r\nconst FormContext = React.createContext<FormContextState | undefined>(undefined);\r\nexport const FormContextProvider = FormContext.Provider;\r\nexport const FormContextConsumer = FormContext.Consumer;"],"file":"FormContext.js"}