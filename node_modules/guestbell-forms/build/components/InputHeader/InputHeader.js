"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.InputHeader = exports.InputHeaderRaw = void 0;

var React = _interopRequireWildcard(require("react"));

var _Button = require("../button/Button");

var _Guid = _interopRequireDefault(require("../utils/Guid"));

var _Dropdown = require("../dropdown/Dropdown");

var _SmoothCollapse = require("../smoothCollapse/SmoothCollapse");

var _withInputHeaderContext = require("./withInputHeaderContext");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var classNames = require('classnames'); // Misc


var MoreIcon = function MoreIcon(props) {
  return React.createElement("svg", props, React.createElement("path", {
    d: "M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
  }));
};

MoreIcon.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
};

var PlusIcon = function PlusIcon(props) {
  return React.createElement("svg", props, React.createElement("path", {
    d: "M7.41 7.84L12 12.42l4.59-4.58L18 9.25l-6 6-6-6z"
  }));
};

PlusIcon.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
};

var CollapseExpandButtonComponent = function CollapseExpandButtonComponent(props) {
  return React.createElement("a", {
    className: props.className,
    onClick: props.onClick,
    href: "#"
  }, props.children);
};

var InputHeaderRaw =
/*#__PURE__*/
function (_React$PureComponent) {
  _inherits(InputHeaderRaw, _React$PureComponent);

  function InputHeaderRaw(props) {
    var _this;

    _classCallCheck(this, InputHeaderRaw);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(InputHeaderRaw).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "componentId", (0, _Guid.default)());

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "smoothCollapseDone", function () {
      return _this.setState(function (previousState) {
        return {
          smoothCollapseDone: true
        };
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "toggleClick", function () {
      return _this.toggle();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "mainButtonClick", function (e) {
      return e.stopPropagation();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "containerClick", function (e) {
      return e.stopPropagation();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "expandAllClick", function () {
      Object.keys(_this.state.inputHeaderContext.components).forEach(function (key) {
        var component = _this.state.inputHeaderContext.components[key];
        component.componentApi.expand();
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "collapseAllClick", function () {
      Object.keys(_this.state.inputHeaderContext.components).forEach(function (key) {
        var component = _this.state.inputHeaderContext.components[key];
        component.componentApi.collapse();
      });
    });

    _this.state = {
      collapsed: props.collapsedDefault,
      inputHeaderContext: {
        registerInputHeader: _this.registerInputHeader,
        unregisterInputHeader: _this.unregisterInputHeader,
        stateChanged: function stateChanged() {
          return _this.forceUpdate();
        },
        components: {}
      },
      smoothCollapseDone: true
    };
    _this.registerInputHeader = _this.registerInputHeader.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.unregisterInputHeader = _this.unregisterInputHeader.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.expand = _this.expand.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.collapse = _this.collapse.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.toggle = _this.toggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }

  _createClass(InputHeaderRaw, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (!this.props.ignoreContext && this.props.inputHeaderContext) {
        this.props.inputHeaderContext.unregisterInputHeader(this.componentId);
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (!this.props.ignoreContext && this.props.inputHeaderContext) {
        this.props.inputHeaderContext.registerInputHeader(this.componentId, {
          componentId: this.componentId,
          componentApi: {
            expand: this.expand,
            collapse: this.collapse,
            toggle: this.toggle
          },
          props: _objectSpread({}, {}, this.props),
          state: _objectSpread({}, {}, this.state)
        });
      }
    }
  }, {
    key: "expand",
    value: function expand() {
      var _this2 = this;

      this.props.collapsable && this.setState({
        collapsed: false,
        smoothCollapseDone: false
      }, function () {
        return _this2.props.inputHeaderContext && _this2.props.inputHeaderContext.stateChanged();
      });
    }
  }, {
    key: "collapse",
    value: function collapse() {
      var _this3 = this;

      this.props.collapsable && this.setState({
        collapsed: true,
        smoothCollapseDone: false
      }, function () {
        return _this3.props.inputHeaderContext && _this3.props.inputHeaderContext.stateChanged();
      });
    }
  }, {
    key: "toggle",
    value: function toggle() {
      var _this4 = this;

      this.props.collapsable && this.setState({
        collapsed: !this.state.collapsed,
        smoothCollapseDone: false
      }, function () {
        return _this4.props.inputHeaderContext && _this4.props.inputHeaderContext.stateChanged();
      });
    }
  }, {
    key: "render",
    value: function render() {
      return React.createElement("div", {
        className: "input__header " + (this.props.className ? this.props.className : '') + ' ' + this.getTypeClass()
      }, React.createElement("div", {
        className: classNames('input__header__top', {
          'input__header__top--tall': this.props.showExpandAll
        }, {
          'input__header__top--no-bg': this.props.noBg
        }, {
          'input__header__top--clickable': this.props.shouldToggleCollapseOnHeaderClick
        }, this.props.headerClassName),
        role: this.props.shouldToggleCollapseOnHeaderClick ? 'button' : undefined,
        onClick: this.props.collapsable && this.props.shouldToggleCollapseOnHeaderClick ? this.toggleClick : undefined
      }, React.createElement("div", {
        className: 'input__header__top__header-container '
      }, this.props.icon && React.createElement("div", {
        className: "input__header__icon line-height--0"
      }, this.props.icon), this.props.title && React.createElement("div", {
        className: "input__header__title"
      }, this.props.title), this.props.subTitle && React.createElement("div", {
        className: "input__header__sub-title"
      }, this.props.subTitle)), React.createElement("div", {
        className: "input__header__top__button-container"
      }, this.renderMainButton(), this.props.extraButtons ? React.createElement(_Dropdown.Dropdown, {
        header: React.createElement(_Button.Button, _extends({
          blank: true,
          circular: true
        }, this.props.extraButtonsButtonProps), React.createElement(MoreIcon, null)),
        showArrow: false,
        headerClassName: 'line-height--0',
        className: ''
      }, this.renderExtraButtons()) : null, this.props.collapsable && React.createElement(_Button.Button, _extends({
        circular: true,
        blank: true,
        className: "input__header__collapse-button line-height--0 ".concat(this.state.collapsed ? 'collapsed' : '')
      }, this.props.collapseButtonsButtonProps, {
        onClick: this.toggleClick
      }), React.createElement(PlusIcon, null))), this.props.showExpandAll && Object.keys(this.state.inputHeaderContext.components).length > 0 && this.renderCollapseExpandAll()), React.createElement("div", {
        className: 'input__header__bottom ' + (this.props.contentClassName ? this.props.contentClassName : '')
      }, this.props.collapsable ? React.createElement("div", {
        className: !this.state.collapsed && this.state.smoothCollapseDone ? 'smooth-collapse__container' : ''
      }, React.createElement(_SmoothCollapse.SmoothCollapse, {
        collapsedHeight: '0.0001px',
        expanded: this.props.collapsed !== undefined ? !this.props.collapsed : !this.state.collapsed,
        onChangeEnd: this.smoothCollapseDone
      }, this.props.children)) : this.props.children));
    }
  }, {
    key: "registerInputHeader",
    value: function registerInputHeader(componentId, component) {
      this.setState(function (previousState) {
        var components = Object.assign({}, previousState.inputHeaderContext.components);
        components[componentId] = component;
        return {
          inputHeaderContext: _objectSpread({}, previousState.inputHeaderContext, {
            components: components
          })
        };
      });
    }
  }, {
    key: "unregisterInputHeader",
    value: function unregisterInputHeader(componentId) {
      this.setState(function (previousState) {
        var components = Object.assign({}, previousState.inputHeaderContext.components);
        delete components[componentId];
        return {
          inputHeaderContext: _objectSpread({}, previousState.inputHeaderContext, {
            components: components
          })
        };
      });
    }
  }, {
    key: "getTypeClass",
    value: function getTypeClass() {
      switch (this.props.type) {
        case 'hero':
          return 'input__header--hero';

        case 'small':
          return 'input__header--small';

        default:
          return '';
      }
    }
  }, {
    key: "renderMainButton",
    value: function renderMainButton() {
      var child = undefined;

      if (typeof this.props.mainButton === 'function') {
        child = this.props.mainButton;
      } else {
        child = this.props.mainButton;
      }

      return React.createElement("div", {
        onClick: this.mainButtonClick
      }, child);
    }
  }, {
    key: "renderExtraButtons",
    value: function renderExtraButtons() {
      var arr = [];

      if (typeof this.props.extraButtons === 'function') {
        arr = this.props.extraButtons;
      } else {
        arr = this.props.extraButtons;
      }

      return arr.map(function (extraButton, index) {
        return React.createElement("li", {
          key: index
        }, extraButton);
      });
    }
  }, {
    key: "renderCollapseExpandAll",
    value: function renderCollapseExpandAll() {
      var _this5 = this;

      var allCollapsed = true;
      var allExpanded = true;
      Object.keys(this.state.inputHeaderContext.components).forEach(function (key) {
        var component = _this5.state.inputHeaderContext.components[key];

        if (component && component.props.collapsable) {
          if (component.state.collapsed) {
            allExpanded = false;
          } else {
            allCollapsed = false;
          }
        }
      });
      return React.createElement("div", {
        className: "input__header__expand-collapse--all",
        onClick: this.containerClick
      }, (allCollapsed || !allExpanded) && React.createElement(_Button.Button, {
        noRipples: true,
        small: true,
        className: allExpanded || !allCollapsed ? 'mr-2' : '',
        onClick: this.expandAllClick,
        blank: true,
        Component: CollapseExpandButtonComponent
      }, "Expand all"), (allExpanded || !allCollapsed) && React.createElement(_Button.Button, {
        noRipples: true,
        small: true,
        onClick: this.collapseAllClick,
        blank: true,
        Component: CollapseExpandButtonComponent
      }, "Collapse all"));
    }
  }]);

  return InputHeaderRaw;
}(React.PureComponent);

exports.InputHeaderRaw = InputHeaderRaw;

_defineProperty(InputHeaderRaw, "defaultProps", {
  ignoreContext: false,
  showExpandAll: false,
  collapsedDefault: true,
  type: 'standard',
  noBg: false,
  shouldToggleCollapseOnHeaderClick: false
});

var InputHeader = (0, _withInputHeaderContext.withInputHeaderContext)(InputHeaderRaw);
exports.InputHeader = InputHeader;
var _default = InputHeader;
exports.default = _default;
//# sourceMappingURL=InputHeader.js.map