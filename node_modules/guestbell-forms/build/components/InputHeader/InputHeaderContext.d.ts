import * as React from 'react';
import { Omit } from '../utils/Typescript';
import { InputHeaderApi, InputHeaderProps, InputHeaderState } from './InputHeader';
export declare type OmitInputHeaderContext<P extends InputHeaderContextProps> = Omit<P, 'inputHeaderContext'>;
export interface InputHeaderComponentContextState {
    props: InputHeaderProps;
    state: InputHeaderState;
    componentApi: InputHeaderApi;
    componentId: string;
}
export declare type InputHeaderComponentsDict = {
    [componentId: string]: InputHeaderComponentContextState;
};
export interface InputHeaderContextState {
    registerInputHeader: (componentId: string, component: InputHeaderComponentContextState) => void;
    unregisterInputHeader: (componentId: string) => void;
    stateChanged: () => void;
    components: InputHeaderComponentsDict;
}
export interface InputHeaderContextProps {
    inputHeaderContext: InputHeaderContextState;
}
export declare const InputHeaderContextProvider: React.ComponentType<React.ProviderProps<InputHeaderContextState>>;
export declare const InputHeaderContextConsumer: React.ComponentType<React.ConsumerProps<InputHeaderContextState>>;
