import * as React from 'react';
import { OmitFormContext, FormContextProps } from '../form/FormContext';
import { InnerRefProps } from './../../types/InnerRefProps';
import { SubmitProps } from '../submit';
import { Omit } from '../utils/Typescript';
export declare enum DynamicSubmitMode {
    Normal = 0,
    Submitting = 1,
    Error = 2,
    Success = 3
}
export declare type DynamicSubmitRawProps = Omit<SubmitProps, 'onClick'> & {
    onClick?: (e: React.MouseEvent<HTMLButtonElement>, submitting?: () => void, error?: () => void, success?: () => void, reset?: () => void) => void;
    submittingChildren?: JSX.Element | string;
    errorChildren?: JSX.Element | string;
    successChildren?: JSX.Element | string;
    submittingClassName?: string;
    errorClassName?: string;
    successClassName?: string;
    normalClassName?: string;
    submitDisablesInputs?: boolean;
    resetEnablesInputs?: boolean;
} & FormContextProps;
export declare type DynamicSubmitProps = OmitFormContext<DynamicSubmitRawProps> & InnerRefProps<DynamicSubmitRaw>;
export interface DynamicSubmitState {
    buttonState: DynamicSubmitMode;
}
export declare class DynamicSubmitRaw extends React.PureComponent<DynamicSubmitRawProps, DynamicSubmitState> {
    static defaultProps: {
        validateForm: boolean;
        submitDisablesInputs: boolean;
        resetEnablesInputs: boolean;
    };
    constructor(props: DynamicSubmitRawProps);
    render(): JSX.Element;
    private handleClick;
    private submitting;
    private error;
    private success;
    private reset;
    private renderChildren;
    private renderClassName;
}
export declare const DynamicSubmit: React.StatelessComponent<DynamicSubmitProps>;
export default DynamicSubmit;
