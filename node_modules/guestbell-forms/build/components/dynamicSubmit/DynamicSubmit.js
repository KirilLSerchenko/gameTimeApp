"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DynamicSubmit = exports.DynamicSubmitRaw = exports.DynamicSubmitMode = void 0;

var React = _interopRequireWildcard(require("react"));

var _withFormContext = require("../form/withFormContext");

var _Submit = require("./../submit/Submit");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var classNames = require('classnames');

// Misc
var DynamicSubmitMode;
exports.DynamicSubmitMode = DynamicSubmitMode;

(function (DynamicSubmitMode) {
  DynamicSubmitMode[DynamicSubmitMode["Normal"] = 0] = "Normal";
  DynamicSubmitMode[DynamicSubmitMode["Submitting"] = 1] = "Submitting";
  DynamicSubmitMode[DynamicSubmitMode["Error"] = 2] = "Error";
  DynamicSubmitMode[DynamicSubmitMode["Success"] = 3] = "Success";
})(DynamicSubmitMode || (exports.DynamicSubmitMode = DynamicSubmitMode = {}));

var DynamicSubmitRaw =
/*#__PURE__*/
function (_React$PureComponent) {
  _inherits(DynamicSubmitRaw, _React$PureComponent);

  function DynamicSubmitRaw(props) {
    var _this;

    _classCallCheck(this, DynamicSubmitRaw);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(DynamicSubmitRaw).call(this, props));
    _this.state = {
      buttonState: DynamicSubmitMode.Normal
    };
    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.submitting = _this.submitting.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.error = _this.error.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.success = _this.success.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.reset = _this.reset.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }

  _createClass(DynamicSubmitRaw, [{
    key: "render",
    value: function render() {
      var buttonClassName = classNames(this.props.className, this.renderClassName());
      return React.createElement(_Submit.SubmitRaw, _extends({}, this.props, {
        className: buttonClassName,
        onClick: this.handleClick
      }), this.renderChildren());
    }
  }, {
    key: "handleClick",
    value: function handleClick(e) {
      e.preventDefault();
      this.props.submitDisablesInputs && this.props.formContext.disableComponents();
      this.props.onClick && this.props.onClick(e, this.submitting, this.error, this.success, this.reset);
    }
  }, {
    key: "submitting",
    value: function submitting() {
      this.setState({
        buttonState: DynamicSubmitMode.Submitting
      });
    }
  }, {
    key: "error",
    value: function error() {
      this.setState({
        buttonState: DynamicSubmitMode.Error
      });
    }
  }, {
    key: "success",
    value: function success() {
      this.setState({
        buttonState: DynamicSubmitMode.Success
      });
    }
  }, {
    key: "reset",
    value: function reset() {
      this.props.resetEnablesInputs && this.props.formContext.enableComponents();
      this.setState({
        buttonState: DynamicSubmitMode.Normal
      });
    }
  }, {
    key: "renderChildren",
    value: function renderChildren() {
      switch (this.state.buttonState) {
        case DynamicSubmitMode.Error:
          return this.props.errorChildren ? this.props.errorChildren : this.props.children;

        case DynamicSubmitMode.Submitting:
          return this.props.submittingChildren ? this.props.submittingChildren : this.props.children;

        case DynamicSubmitMode.Success:
          return this.props.successChildren ? this.props.successChildren : this.props.children;

        default:
          return this.props.children;
      }
    }
  }, {
    key: "renderClassName",
    value: function renderClassName() {
      switch (this.state.buttonState) {
        case DynamicSubmitMode.Error:
          return this.props.errorClassName ? this.props.errorClassName : '';

        case DynamicSubmitMode.Submitting:
          return this.props.submittingClassName ? this.props.submittingClassName : '';

        case DynamicSubmitMode.Success:
          return this.props.successClassName ? this.props.successClassName : '';

        default:
          return this.props.normalClassName ? this.props.normalClassName : '';
      }
    }
  }]);

  return DynamicSubmitRaw;
}(React.PureComponent);

exports.DynamicSubmitRaw = DynamicSubmitRaw;

_defineProperty(DynamicSubmitRaw, "defaultProps", Object.assign({}, {
  validateForm: true,
  submitDisablesInputs: true,
  resetEnablesInputs: true
}));

var DynamicSubmit = (0, _withFormContext.withFormContext)(DynamicSubmitRaw);
exports.DynamicSubmit = DynamicSubmit;
var _default = DynamicSubmit;
exports.default = _default;
//# sourceMappingURL=DynamicSubmit.js.map