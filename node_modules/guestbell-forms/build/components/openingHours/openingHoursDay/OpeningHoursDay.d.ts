import * as React from 'react';
import { BaseInputProps, BaseInputState, BaseInput } from '../../base/input/BaseInput';
import { OmitFormContext } from '../../form/FormContext';
import { InnerRefProps } from './../../../types/InnerRefProps';
export interface OpeningHoursDayObj {
    times: Date[];
}
export interface OpeningHoursDayRawProps extends BaseInputProps<never> {
    onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;
    onOpeningHoursChange: (openingHours: OpeningHoursDayObj) => void;
    openingHours: OpeningHoursDayObj;
    label?: JSX.Element | string;
    maxOpenCloseTimes?: number;
}
export declare type OpeningHoursDayProps = OmitFormContext<OpeningHoursDayRawProps> & InnerRefProps<OpeningHoursDayRaw>;
export interface OpeningHoursState extends BaseInputState {
}
export declare class OpeningHoursDayRaw extends BaseInput<OpeningHoursDayRawProps, OpeningHoursState, never> {
    static defaultProps: {
        disabled?: boolean;
        className?: string;
        label?: string | JSX.Element;
        tooltip?: string | JSX.Element;
        tooltipProps?: any;
        value?: string;
        onChange?: (e: React.ChangeEvent<never>, isValid: boolean) => void;
        required?: boolean;
        customValidators?: import("../../../validators/base").IBaseValidator[];
        validators?: ("number" | "email" | "latitude" | "longitude" | "url")[];
        noValidate?: boolean;
        validationName?: string;
        touchOn?: "focus" | "blur";
        ignoreContext?: boolean;
        onTheFlightValidate?: (value: string) => boolean;
        onFocus?: (e: React.SyntheticEvent<{}>) => void;
        onBlur?: () => void;
        title?: string | JSX.Element;
        onKeyDown?: (e: React.KeyboardEvent<HTMLElement>) => void;
        errors?: (string | JSX.Element)[];
        onErrorsChanged?: (errors: (string | JSX.Element)[]) => void;
        showValidation?: boolean;
        reRendersWhenContextChanges?: boolean;
    } & import("../../form/FormContext").FormContextProps & {
        type: string;
        allowMultiple: boolean;
        maxOpenCloseTimes: number;
    };
    private fullDayMilliseconds;
    constructor(props: OpeningHoursDayRawProps);
    render(): JSX.Element;
    private addTimeClick;
    private removeTimeClick;
    private timeChanged;
    private getBottomBorder;
    private getTime;
}
export declare const OpeningHoursDay: React.StatelessComponent<OpeningHoursDayProps>;
export default OpeningHoursDay;
