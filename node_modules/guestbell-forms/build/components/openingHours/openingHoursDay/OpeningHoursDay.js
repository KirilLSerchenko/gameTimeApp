"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.OpeningHoursDay = exports.OpeningHoursDayRaw = void 0;

var React = _interopRequireWildcard(require("react"));

var _Time = require("../../time/Time");

var _OpeningHoursUtil = _interopRequireDefault(require("../utils/OpeningHoursUtil"));

var _InputGroup = _interopRequireDefault(require("../../inputGroup/InputGroup"));

var _BaseInput2 = require("../../base/input/BaseInput");

var _Button = require("../../button/Button");

var _withFormContext = require("../../form/withFormContext");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var PlusIcon = function PlusIcon(props) {
  return React.createElement("svg", props, React.createElement("path", {
    d: "M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"
  }));
};

PlusIcon.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}; // Libs

var OpeningHoursDayRaw =
/*#__PURE__*/
function (_BaseInput) {
  _inherits(OpeningHoursDayRaw, _BaseInput);

  function OpeningHoursDayRaw(props) {
    var _this;

    _classCallCheck(this, OpeningHoursDayRaw);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(OpeningHoursDayRaw).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "fullDayMilliseconds", 24 * 60 * 60 * 1000);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "addTimeClick", function () {
      var newTime = new Date(_this.props.openingHours && _this.props.openingHours.times && _this.props.openingHours.times.length ? _this.props.openingHours.times[_this.props.openingHours.times.length - 1] : _this.getTime(8, 0));

      if (newTime.getHours() < 23) {
        newTime.setHours(newTime.getHours() + 1);
      }

      _this.props.onOpeningHoursChange(_objectSpread({}, _this.props.openingHours, {
        times: _this.props.openingHours.times.concat([newTime])
      }));
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "removeTimeClick", function (index) {
      return function () {
        return _this.props.onOpeningHoursChange(_objectSpread({}, _this.props.openingHours, {
          times: _this.props.openingHours.times.filter(function (time, itemIndex) {
            return itemIndex !== index;
          })
        }));
      };
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "timeChanged", function (index) {
      return function (time) {
        var newOpeningHours = _objectSpread({}, _this.props.openingHours, {
          times: _this.props.openingHours.times.slice(0)
        });

        newOpeningHours.times[index] = time;

        _this.props.onOpeningHoursChange(newOpeningHours);
      };
    });

    return _this;
  }

  _createClass(OpeningHoursDayRaw, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      return React.createElement(_InputGroup.default, {
        title: this.props.title,
        className: 'input__group__openingHoursDay ' + (this.props.className ? ' ' + this.props.className : ''),
        tooltip: this.props.tooltip
      }, React.createElement("div", {
        className: 'input__base openingHoursDay-input ' + this.getValidationClass(),
        ref: this.containerRef
      }, React.createElement("div", {
        className: "openingHoursDay-input__container"
      }, this.props.openingHours && this.props.openingHours.times && this.props.openingHours.times.map(function (item, index) {
        var previousTime = index > 0 ? new Date(_this2.props.openingHours.times[index - 1]) : _this2.getTime(0, 0);
        var nextTime = _this2.props.openingHours.times.length - 1 > index ? new Date(_this2.props.openingHours.times[index + 1]) : _this2.getTime(23, 59);
        return React.createElement("div", {
          className: "openingHoursDay-input__time__container",
          key: index
        }, React.createElement("span", {
          className: "openingHoursDay-input__label"
        }, index % 2 === 0 ? 'Opens' : 'Closes'), React.createElement(_Time.Time, {
          className: 'openingHoursDay-input__time',
          timeChange: _this2.timeChanged(index),
          time: item,
          min: previousTime,
          max: nextTime
        }), React.createElement(_Button.Button, {
          onClick: _this2.removeTimeClick(index),
          className: "openingHoursDay-input__button--remove mr-5 line-height--0",
          circular: true,
          blank: true,
          type: "error"
        }, React.createElement(PlusIcon, null)));
      }), this.props.maxOpenCloseTimes > this.props.openingHours.times.length && React.createElement(_Button.Button, {
        className: "openingHoursDay-input__button-open-close",
        onClick: this.addTimeClick,
        type: 'primary',
        hero: true
      }, this.props.openingHours && this.props.openingHours.times && this.props.openingHours.times.length % 2 === 0 ? 'Open' : 'Close')), this.renderDefaultValidation(), this.props.openingHours && this.props.label && React.createElement("span", {
        className: 'label-classname ' + (this.props.openingHours && this.props.openingHours.times && this.props.openingHours.times.length ? 'label--focused' : 'label--focused label--closed')
      }, this.renderLabel(true))), this.getBottomBorder());
    }
  }, {
    key: "getBottomBorder",
    value: function getBottomBorder() {
      var parts = [];

      if (this.props.openingHours && this.props.openingHours.times && !this.props.openingHours.times.length) {
        parts = parts.concat([1]);
      } else {
        parts = parts.concat([_OpeningHoursUtil.default.getTimeFromMidnight(this.props.openingHours.times[0]) / this.fullDayMilliseconds]);

        for (var index = 0; index < this.props.openingHours.times.length - 1; index++) {
          var start = _OpeningHoursUtil.default.getTimeFromMidnight(this.props.openingHours.times[index]);

          var end = _OpeningHoursUtil.default.getTimeFromMidnight(this.props.openingHours.times[index + 1]);

          var diff = (end - start) / this.fullDayMilliseconds;
          parts = parts.concat([diff]);
        }

        parts = parts.concat([(this.fullDayMilliseconds - _OpeningHoursUtil.default.getTimeFromMidnight(this.props.openingHours.times[this.props.openingHours.times.length - 1])) / this.fullDayMilliseconds]);
      }

      return React.createElement("div", {
        className: "openingHoursDay-input__bottom-border__container"
      }, parts.map(function (part, i) {
        return React.createElement("div", {
          key: i,
          className: 'openingHoursDay-input__bottom-border ' + (i % 2 === 0 ? 'openingHoursDay-input__bottom-border--closed' : 'openingHoursDay-input__bottom-border--open'),
          style: {
            width: part ? (part * 100).toFixed(2) + '%' : '0'
          }
        });
      }));
    }
  }, {
    key: "getTime",
    value: function getTime(hours, minutes) {
      var time = new Date();
      time.setHours(hours);
      time.setMinutes(minutes);
      time.setSeconds(0);
      return time;
    }
  }]);

  return OpeningHoursDayRaw;
}(_BaseInput2.BaseInput);

exports.OpeningHoursDayRaw = OpeningHoursDayRaw;

_defineProperty(OpeningHoursDayRaw, "defaultProps", Object.assign({}, _BaseInput2.BaseInput.defaultProps, {
  type: 'openingHours',
  allowMultiple: false,
  maxOpenCloseTimes: 10
}));

var OpeningHoursDay = (0, _withFormContext.withFormContext)(OpeningHoursDayRaw);
exports.OpeningHoursDay = OpeningHoursDay;
var _default = OpeningHoursDay;
exports.default = _default;
//# sourceMappingURL=OpeningHoursDay.js.map