"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.OpeningHoursUtil = void 0;

var React = _interopRequireWildcard(require("react"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var OpeningHoursUtil =
/*#__PURE__*/
function () {
  function OpeningHoursUtil() {
    _classCallCheck(this, OpeningHoursUtil);
  }

  _createClass(OpeningHoursUtil, [{
    key: "getTimeFromMidnight",
    value: function getTimeFromMidnight(time) {
      return (time.getTime() - time.getTimezoneOffset() * 60000) % 86400000;
    }
  }, {
    key: "getTotalTimeString",
    value: function getTotalTimeString(times) {
      var _this = this;

      var totalTime = 0;
      var newTimes = times.slice(0).map(function (item) {
        return _this.getTimeFromMidnight(item);
      });

      if (times.length % 2 === 1) {
        newTimes = newTimes.concat([86400000 + 60 * 1000]);
      }

      for (var index = 0; index < newTimes.length - 1; index++) {
        if (index % 2 === 0) {
          var time = newTimes[index];
          var nextTime = newTimes[index + 1];
          totalTime += nextTime - time;
        }
      }

      var hours = Math.floor(totalTime / 3600000);
      var minutes = Math.floor(totalTime / (60 * 1000)) % 60;
      var hoursFormated = hours ? hours.toFixed(0) + ' hour' + (hours > 1 ? 's' : '') : '';
      var minutesFormated = minutes ? minutes.toFixed(0) + ' minute' + (minutes > 1 ? 's' : '') : '';

      if (hoursFormated && minutesFormated) {
        return React.createElement("span", null, "Open ", hoursFormated, " and ", minutesFormated);
      }

      if (hoursFormated) {
        return React.createElement("span", null, "Open ", hoursFormated);
      }

      if (minutesFormated) {
        return React.createElement("span", null, "Open ", minutesFormated);
      }

      return React.createElement("span", null, "Closed");
    }
  }, {
    key: "getLabelSuffix",
    value: function getLabelSuffix(day) {
      return day && day.times && day.times.length === 0 ? 'Closed' : this.getTotalTimeString(day.times);
    }
  }]);

  return OpeningHoursUtil;
}();

exports.OpeningHoursUtil = OpeningHoursUtil;
var util = new OpeningHoursUtil();
var _default = util;
exports.default = _default;
//# sourceMappingURL=OpeningHoursUtil.js.map