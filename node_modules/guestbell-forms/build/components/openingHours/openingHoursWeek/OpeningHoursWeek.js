"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.OpeningHoursWeek = exports.OpeningHoursWeekRaw = void 0;

var React = _interopRequireWildcard(require("react"));

var _OpeningHoursUtil = _interopRequireDefault(require("../utils/OpeningHoursUtil"));

var _OpeningHoursDay = require("../openingHoursDay/OpeningHoursDay");

var _BaseInput2 = require("../../base/input/BaseInput");

var _Checkbox = require("../../checkbox/Checkbox");

var _withFormContext = require("../../form/withFormContext");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var OpeningHoursWeekRaw =
/*#__PURE__*/
function (_BaseInput) {
  _inherits(OpeningHoursWeekRaw, _BaseInput);

  function OpeningHoursWeekRaw(props) {
    var _this;

    _classCallCheck(this, OpeningHoursWeekRaw);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(OpeningHoursWeekRaw).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onOpeningHoursChange", function (index, day) {
      return function (openingHours) {
        var days = _this.props.days.slice(0);

        days[index] = _objectSpread({}, day, openingHours, {
          isStandardDay: false
        });

        _this.props.onDaysChange(days);
      };
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "isStandardDayChecked", function (index, day) {
      return function (checked) {
        var days = _this.props.days.slice(0);

        days[index] = _objectSpread({}, day, {
          isStandardDay: checked.target.checked
        });

        _this.props.onDaysChange(days);
      };
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "standardDayChanged", function (openingHours) {
      _this.props.onStandardDayChange(openingHours);
    });

    _this.state = _objectSpread({}, _this.state);
    return _this;
  }

  _createClass(OpeningHoursWeekRaw, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      if (!this.props.days || !this.props.days.length) {
        this.props.onDaysChange([{
          dayLabel: 'Monday',
          times: []
        }, {
          dayLabel: 'Tuesday',
          times: []
        }, {
          dayLabel: 'Wednesday',
          times: []
        }, {
          dayLabel: 'Thursday',
          times: []
        }, {
          dayLabel: 'Friday',
          times: []
        }, {
          dayLabel: 'Saturday',
          times: []
        }, {
          dayLabel: 'Sunday',
          times: []
        }]);
      }
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(newProps) {
      if (!newProps.days || !newProps.days.length) {
        newProps.onDaysChange([{
          dayLabel: 'Monday',
          times: []
        }, {
          dayLabel: 'Tuesday',
          times: []
        }, {
          dayLabel: 'Wednesday',
          times: []
        }, {
          dayLabel: 'Thursday',
          times: []
        }, {
          dayLabel: 'Friday',
          times: []
        }, {
          dayLabel: 'Saturday',
          times: []
        }, {
          dayLabel: 'Sunday',
          times: []
        }]);
      }
    }
  }, {
    key: "render",
    value: function render() {
      return React.createElement("div", {
        className: 'openingHoursWeek-input ' + this.getValidationClass() + ' ' + (this.props.className ? this.props.className : ''),
        ref: this.containerRef
      }, this.renderContent());
    }
  }, {
    key: "renderContent",
    value: function renderContent() {
      var _this2 = this;

      return React.createElement("div", {
        className: ""
      }, this.props.standardDay && React.createElement(_OpeningHoursDay.OpeningHoursDay, {
        className: "openingHoursWeek__standard-day",
        label: React.createElement("span", null, _OpeningHoursUtil.default.getLabelSuffix(this.props.standardDay)),
        openingHours: {
          times: this.props.standardDay.times
        },
        onOpeningHoursChange: this.standardDayChanged,
        title: 'Standard day',
        tooltip: React.createElement("p", null, "We recommend to use ", React.createElement("b", null, "Standard day"), " if multiple days share the same opening hours. Check \"Standard day?\" checkbox for each of these days to make them share standard opening hours.")
      }), this.props.days.map(function (day, index) {
        return React.createElement(_OpeningHoursDay.OpeningHoursDay, {
          className: '',
          key: index,
          label: _this2.props.standardDay ? React.createElement("span", null, _OpeningHoursUtil.default.getLabelSuffix(_this2.props.standardDay && day.isStandardDay ? _this2.props.standardDay : day), React.createElement("span", {
            className: "float-right"
          }, "Standard day?", React.createElement(_Checkbox.Checkbox, {
            className: "label__checkbox",
            checked: day.isStandardDay,
            onChecked: _this2.isStandardDayChecked(index, day)
          }))) : day.dayLabel,
          openingHours: {
            times: _this2.props.standardDay && day.isStandardDay ? _this2.props.standardDay.times : day.times
          },
          onOpeningHoursChange: _this2.onOpeningHoursChange(index, day),
          title: day.dayLabel
        });
      }), React.createElement("span", {
        className: "bar"
      }), this.renderDefaultValidation());
    }
  }]);

  return OpeningHoursWeekRaw;
}(_BaseInput2.BaseInput);

exports.OpeningHoursWeekRaw = OpeningHoursWeekRaw;

_defineProperty(OpeningHoursWeekRaw, "defaultProps", Object.assign({}, _BaseInput2.BaseInput.defaultProps, {
  type: 'openingHoursWeek',
  placeholder: '',
  collapsable: false
}));

var OpeningHoursWeek = (0, _withFormContext.withFormContext)(OpeningHoursWeekRaw);
exports.OpeningHoursWeek = OpeningHoursWeek;
var _default = OpeningHoursWeek;
exports.default = _default;
//# sourceMappingURL=OpeningHoursWeek.js.map