import * as React from 'react';
import { OpeningHoursDayObj } from '../openingHoursDay/OpeningHoursDay';
import { BaseInputProps, BaseInputState, BaseInput } from '../../base/input/BaseInput';
import { OmitFormContext } from '../../form/FormContext';
import { InnerRefProps } from './../../../types/InnerRefProps';
export interface OpeningHoursWeekDayObj extends OpeningHoursDayObj {
    isStandardDay?: boolean;
    dayLabel?: string;
}
export interface OpeningHoursWeekRawProps extends BaseInputProps<never> {
    onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;
    days: OpeningHoursWeekDayObj[];
    onDaysChange: (days: OpeningHoursWeekDayObj[]) => void;
    standardDay?: OpeningHoursWeekDayObj;
    onStandardDayChange?: (day: OpeningHoursWeekDayObj) => void;
}
export declare type OpeningHoursWeekProps = OmitFormContext<OpeningHoursWeekRawProps> & InnerRefProps<OpeningHoursWeekRaw>;
export interface OpeningHoursWeekState extends BaseInputState {
}
export declare class OpeningHoursWeekRaw extends BaseInput<OpeningHoursWeekRawProps, OpeningHoursWeekState, never> {
    static defaultProps: {
        disabled?: boolean;
        className?: string;
        label?: string | JSX.Element;
        tooltip?: string | JSX.Element;
        tooltipProps?: any;
        value?: string;
        onChange?: (e: React.ChangeEvent<never>, isValid: boolean) => void;
        required?: boolean;
        customValidators?: import("../../../validators/base").IBaseValidator[];
        validators?: ("number" | "email" | "latitude" | "longitude" | "url")[];
        noValidate?: boolean;
        validationName?: string;
        touchOn?: "focus" | "blur";
        ignoreContext?: boolean;
        onTheFlightValidate?: (value: string) => boolean;
        onFocus?: (e: React.SyntheticEvent<{}>) => void;
        onBlur?: () => void;
        title?: string | JSX.Element;
        onKeyDown?: (e: React.KeyboardEvent<HTMLElement>) => void;
        errors?: (string | JSX.Element)[];
        onErrorsChanged?: (errors: (string | JSX.Element)[]) => void;
        showValidation?: boolean;
        reRendersWhenContextChanges?: boolean;
    } & import("../../form/FormContext").FormContextProps & {
        type: string;
        placeholder: string;
        collapsable: boolean;
    };
    constructor(props: OpeningHoursWeekRawProps);
    componentWillMount(): void;
    componentWillReceiveProps(newProps: OpeningHoursWeekProps): void;
    render(): JSX.Element;
    private renderContent;
    private onOpeningHoursChange;
    private isStandardDayChecked;
    private standardDayChanged;
}
export declare const OpeningHoursWeek: React.StatelessComponent<OpeningHoursWeekProps>;
export default OpeningHoursWeek;
