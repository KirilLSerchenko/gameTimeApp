"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Time = exports.TimeRaw = void 0;

var React = _interopRequireWildcard(require("react"));

var _InputGroup = _interopRequireDefault(require("../inputGroup/InputGroup"));

var _BaseInput2 = require("../base/input/BaseInput");

var _withFormContext = require("../form/withFormContext");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ArrowIcon = function ArrowIcon(props) {
  return React.createElement("svg", props, React.createElement("path", {
    d: "M7.41 7.84L12 12.42l4.59-4.58L18 9.25l-6 6-6-6z"
  }));
};

ArrowIcon.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  width: "24",
  height: "24",
  viewBox: "0 0 24 24"
}; // Libs

var TimeRaw =
/*#__PURE__*/
function (_BaseInput) {
  _inherits(TimeRaw, _BaseInput);

  function TimeRaw(props) {
    var _this;

    _classCallCheck(this, TimeRaw);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TimeRaw).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onBlur", function (e) {
      if (_this.state.hoursText) {
        _this.handleHoursChange(_this.state.hoursText);
      }

      if (_this.state.minutesText) {
        _this.handleMinutesChange(_this.state.minutesText);
      }

      _this.setState({
        minutesText: undefined,
        hoursText: undefined
      }, function () {
        return _this.handleBlur(e);
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onMinutesChanged", function (e) {
      // this.handleMinutesChange(e.target.value);
      _this.setState({
        minutesText: e.target.value
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "removeMinuteClick", function (e) {
      e.preventDefault();

      _this.handleMinutesChange((_this.props.time.getMinutes() - 1).toString());
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "addMinuteClick", function (e) {
      e.preventDefault();

      _this.handleMinutesChange((_this.props.time.getMinutes() + 1).toString());
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "removeHourClick", function (e) {
      e.preventDefault();

      _this.handleHoursChange((_this.props.time.getHours() - 1).toString());
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onHoursChanged", function (e) {
      // this.handleHoursChange(e.target.value);
      _this.setState({
        hoursText: e.target.value
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "addHourClick", function (e) {
      e.preventDefault();

      _this.handleHoursChange((_this.props.time.getHours() + 1).toString());
    });

    _this.handleHoursChange = _this.handleHoursChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.handleMinutesChange = _this.handleMinutesChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }

  _createClass(TimeRaw, [{
    key: "render",
    value: function render() {
      var hours = this.props.time.getHours();
      hours = (hours + 24) % 24;
      var mid = 'AM';

      if (hours === 0) {
        // At 00 hours we need to show 12 am
        hours = 12;
      } else if (hours > 12) {
        hours = hours % 12;
        mid = 'PM';
      }

      return React.createElement(_InputGroup.default, {
        title: this.props.title
      }, React.createElement("div", {
        className: 'input__base time-input ' + this.getValidationClass() + ' ' + (this.props.className ? this.props.className : ''),
        ref: this.containerRef
      }, React.createElement("div", {
        className: ""
      }, React.createElement("div", {
        className: "time-input__arrows__container"
      }, React.createElement("button", {
        className: "plus",
        onClick: this.addHourClick
      }, React.createElement(ArrowIcon, null)), React.createElement("div", {
        className: "input-padding"
      }, React.createElement("input", {
        disabled: this.getDisabled(),
        required: this.props.required,
        className: 'time-input__time ' + (this.state.value ? 'filled' : ''),
        onChange: this.onHoursChanged,
        value: this.state.hoursText !== undefined ? this.state.hoursText : this.props.time.getHours().toString(),
        onBlur: this.onBlur,
        onFocus: this.handleFocus,
        type: "number"
      }), React.createElement("span", {
        className: "highlight"
      })), React.createElement("button", {
        className: "minus",
        onClick: this.removeHourClick
      }, React.createElement(ArrowIcon, null)))), React.createElement("span", {
        className: ""
      }, ":"), React.createElement("div", {
        className: ""
      }, React.createElement("div", {
        className: "time-input__arrows__container"
      }, React.createElement("button", {
        className: "plus",
        onClick: this.addMinuteClick
      }, React.createElement(ArrowIcon, null)), React.createElement("div", {
        className: "input-padding"
      }, React.createElement("input", {
        disabled: this.getDisabled(),
        required: this.props.required,
        className: 'time-input__time ' + (this.state.value ? 'filled' : ''),
        onChange: this.onMinutesChanged,
        value: this.state.minutesText !== undefined ? this.state.minutesText : this.props.time.getMinutes() < 10 ? '0' + this.props.time.getMinutes().toString() : this.props.time.getMinutes().toString(),
        onBlur: this.onBlur,
        onFocus: this.handleFocus,
        type: "number"
      }), React.createElement("span", {
        className: "highlight"
      })), React.createElement("button", {
        className: "minus",
        onClick: this.removeMinuteClick
      }, React.createElement(ArrowIcon, null)))), React.createElement("div", null, React.createElement("span", {
        className: "time-input__am-pm"
      }, mid)), this.renderDefaultValidation()));
    }
  }, {
    key: "handleLimits",
    value: function handleLimits(time) {
      if (this.props.min) {
        if (time.getTime() - this.props.min.getTime() <= 0) {
          this.props.timeChange(new Date(this.props.min.getTime()));
          return;
        }
      }

      if (this.props.max) {
        if (this.props.max.getTime() - time.getTime() <= 0) {
          this.props.timeChange(new Date(this.props.max.getTime()));
          return;
        }
      }

      this.props.timeChange(time);
    }
  }, {
    key: "handleHoursChange",
    value: function handleHoursChange(hoursString) {
      var num = Number(hoursString);

      if (hoursString === '') {
        num = 0;
      }

      if (!isNaN(num)) {
        var newTime = new Date(this.props.time.getTime());
        newTime.setHours(num);
        this.handleLimits(newTime);
      }
    }
  }, {
    key: "handleMinutesChange",
    value: function handleMinutesChange(minutesString) {
      var num = Number(minutesString);

      if (minutesString === '') {
        num = 0;
      }

      if (!isNaN(num)) {
        var newTime = new Date(this.props.time.getTime());
        newTime.setMinutes(num);
        this.handleLimits(newTime);
      }
    }
  }]);

  return TimeRaw;
}(_BaseInput2.BaseInput);

exports.TimeRaw = TimeRaw;

_defineProperty(TimeRaw, "defaultProps", Object.assign({}, _BaseInput2.BaseInput.defaultProps, {
  type: 'time',
  placeholder: ''
}));

var Time = (0, _withFormContext.withFormContext)(TimeRaw);
exports.Time = Time;
var _default = Time;
exports.default = _default;
//# sourceMappingURL=Time.js.map