import * as React from 'react';
import { BaseInputProps, BaseInputState, BaseInput } from '../base/input/BaseInput';
import { OmitFormContext } from '../form/FormContext';
import { InnerRefProps } from './../../types/InnerRefProps';
export interface TimeRawProps extends BaseInputProps<HTMLInputElement> {
    onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;
    timeChange: (time: Date) => void;
    time: Date;
    min?: Date;
    max?: Date;
    label?: never;
}
export declare type TimeProps = OmitFormContext<TimeRawProps> & InnerRefProps<TimeRaw>;
export interface TimeState extends BaseInputState {
    hoursText?: string;
    minutesText?: string;
}
export declare class TimeRaw extends BaseInput<TimeRawProps, TimeState, HTMLInputElement> {
    static defaultProps: {
        disabled?: boolean;
        className?: string;
        label?: string | JSX.Element;
        tooltip?: string | JSX.Element;
        tooltipProps?: any;
        value?: string;
        onChange?: (e: React.ChangeEvent<never>, isValid: boolean) => void;
        required?: boolean;
        customValidators?: import("../../validators/base").IBaseValidator[];
        validators?: ("number" | "email" | "latitude" | "longitude" | "url")[];
        noValidate?: boolean;
        validationName?: string;
        touchOn?: "focus" | "blur";
        ignoreContext?: boolean;
        onTheFlightValidate?: (value: string) => boolean;
        onFocus?: (e: React.SyntheticEvent<{}>) => void;
        onBlur?: () => void;
        title?: string | JSX.Element;
        onKeyDown?: (e: React.KeyboardEvent<HTMLElement>) => void;
        errors?: (string | JSX.Element)[];
        onErrorsChanged?: (errors: (string | JSX.Element)[]) => void;
        showValidation?: boolean;
        reRendersWhenContextChanges?: boolean;
    } & import("../form/FormContext").FormContextProps & {
        type: string;
        placeholder: string;
    };
    constructor(props: TimeRawProps);
    render(): JSX.Element;
    private onBlur;
    private onMinutesChanged;
    private removeMinuteClick;
    private addMinuteClick;
    private removeHourClick;
    private onHoursChanged;
    private addHourClick;
    private handleLimits;
    private handleHoursChange;
    private handleMinutesChange;
}
export declare const Time: React.StatelessComponent<TimeProps>;
export default Time;
