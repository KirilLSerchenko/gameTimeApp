import * as React from 'react';
import { BaseInputProps, BaseInputState, BaseInput } from '../base/input/BaseInput';
import { OmitFormContext } from '../form/FormContext';
import InnerRefProps from '../../types/InnerRefProps';
export interface TextAreaRawProps extends BaseInputProps<HTMLTextAreaElement> {
    mask?: string;
    reverse?: boolean;
    placeholder?: string;
    stopClickPropagation?: boolean;
    inputRef?: (input: HTMLTextAreaElement) => void;
    readOnly?: boolean;
    type?: 'number' | 'text';
    minRows?: number;
    maxRows?: number;
}
export declare type TextAreaProps = OmitFormContext<TextAreaRawProps> & InnerRefProps<TextAreaRaw>;
export interface TextAreaState extends BaseInputState {
}
export declare class TextAreaRaw extends BaseInput<TextAreaRawProps, TextAreaState, HTMLTextAreaElement> {
    static defaultProps: {
        disabled?: boolean;
        className?: string;
        label?: string | JSX.Element;
        tooltip?: string | JSX.Element;
        tooltipProps?: any;
        value?: string;
        onChange?: (e: React.ChangeEvent<never>, isValid: boolean) => void;
        required?: boolean;
        customValidators?: import("../../validators/base").IBaseValidator[];
        validators?: ("number" | "email" | "latitude" | "longitude" | "url")[];
        noValidate?: boolean;
        validationName?: string;
        touchOn?: "focus" | "blur";
        ignoreContext?: boolean;
        onTheFlightValidate?: (value: string) => boolean;
        onFocus?: (e: React.SyntheticEvent<{}>) => void;
        onBlur?: () => void;
        title?: string | JSX.Element;
        onKeyDown?: (e: React.KeyboardEvent<HTMLElement>) => void;
        errors?: (string | JSX.Element)[];
        onErrorsChanged?: (errors: (string | JSX.Element)[]) => void;
        showValidation?: boolean;
        reRendersWhenContextChanges?: boolean;
    } & import("../form/FormContext").FormContextProps & {
        type: string;
        placeholder: string;
        stopClickPropagation: boolean;
        readOnly: boolean;
    };
    private textArea;
    constructor(props: TextAreaRawProps);
    render(): JSX.Element;
    focus(): void;
    private onKeyDown;
    private elemRef;
    private onContainerClick;
}
export declare const TextArea: React.StatelessComponent<TextAreaProps>;
export default TextArea;
