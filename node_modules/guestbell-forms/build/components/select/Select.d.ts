import * as React from 'react';
import { BaseInputProps, BaseInputState, BaseInput } from '../base/input/BaseInput';
import { OmitFormContext } from '../form/FormContext';
import InnerRefProps from '../../types/InnerRefProps';
export interface SelectValue {
    value: number | string;
    label?: string;
    forceSelected?: boolean;
}
export interface SelectRawProps extends BaseInputProps<HTMLSelectElement> {
    values?: SelectValue[];
    defaultEmpty?: boolean;
    multiple?: boolean;
    selectedValues?: SelectValue[];
    onSelectedValuesChange?: (newValues: SelectValue[]) => void;
    inputRef?: (input: HTMLSelectElement) => void;
    readOnly?: boolean;
    readonlyEmptyPlaceholder?: string;
}
export declare type SelectProps = OmitFormContext<SelectRawProps> & InnerRefProps<SelectRaw>;
export interface SelectState extends BaseInputState {
}
declare class SelectRaw extends BaseInput<SelectRawProps, SelectState, HTMLSelectElement> {
    static defaultProps: {
        disabled?: boolean;
        className?: string;
        label?: string | JSX.Element;
        tooltip?: string | JSX.Element;
        tooltipProps?: any;
        value?: string;
        onChange?: (e: React.ChangeEvent<never>, isValid: boolean) => void;
        required?: boolean;
        customValidators?: import("../../validators/base").IBaseValidator[];
        validators?: ("number" | "email" | "latitude" | "longitude" | "url")[];
        noValidate?: boolean;
        validationName?: string;
        touchOn?: "focus" | "blur";
        ignoreContext?: boolean;
        onTheFlightValidate?: (value: string) => boolean;
        onFocus?: (e: React.SyntheticEvent<{}>) => void;
        onBlur?: () => void;
        title?: string | JSX.Element;
        onKeyDown?: (e: React.KeyboardEvent<HTMLElement>) => void;
        errors?: (string | JSX.Element)[];
        onErrorsChanged?: (errors: (string | JSX.Element)[]) => void;
        showValidation?: boolean;
        reRendersWhenContextChanges?: boolean;
    } & import("../form/FormContext").FormContextProps & {
        defaultEmpty: boolean;
        multiple: boolean;
        readOnly: boolean;
        readonlyEmptyPlaceholder: string;
    };
    constructor(props: SelectRawProps);
    componentDidMount(): void;
    render(): JSX.Element;
    private handleChangeCustom;
    private handleValid;
    private renderReadonly;
    private renderSelectedValues;
    private removeItemClick;
}
export declare const Select: React.StatelessComponent<SelectProps>;
export default Select;
