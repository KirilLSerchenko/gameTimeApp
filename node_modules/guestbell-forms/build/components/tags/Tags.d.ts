import * as React from 'react';
import { TextProps } from '../text/Text';
import { BaseInputProps, BaseInputState, BaseInput, ValidationError } from '../base/input/BaseInput';
import { OmitFormContext } from '../form/FormContext';
import { InnerRefProps } from './../../types/InnerRefProps';
export declare type Tag = {
    id: number | string;
    name: string;
};
export declare type TagsRawProps = {
    className?: string;
    disabled?: boolean;
    tags: Tag[];
    existingTags?: Tag[];
    fetchExistingTags?: (text: string) => Promise<Tag[]>;
    onTagsChanged: (newTags: Tag[]) => void;
    onNewTagAdded?: (newTagName: string) => Promise<Tag>;
    allowNew?: boolean;
    textProps?: TextProps;
    readOnly?: boolean;
    readonlyEmptyPlaceholder?: string;
    maxTags?: number;
    valueNotAddedError?: (string | JSX.Element);
    maxTagsSurpassedError?: (string | JSX.Element);
    showSuggestions?: boolean;
    suggestionsLoadingComponent?: string | JSX.Element;
    suggestionsEmptyComponent?: string | JSX.Element;
    loadingDelayMs?: number;
    filterExistingTags?: (text: string, existingTags: Tag[]) => Tag[];
    maxSuggestions?: number;
} & BaseInputProps<HTMLInputElement>;
export declare type TagsProps = OmitFormContext<TagsRawProps> & InnerRefProps<TagsRaw>;
export interface TagsState extends BaseInputState {
    textIsFocused: boolean;
    textErrors: ValidationError[];
    textIsValid: boolean;
    suggestionsVisible: boolean;
    fetchedExistingTags: Tag[];
    fetchingExistingTags: boolean;
    preselectedSuggestion?: number;
}
export declare class TagsRaw extends BaseInput<TagsRawProps, TagsState, HTMLInputElement> {
    static defaultProps: TagsRawProps;
    private textRef;
    constructor(props: TagsRawProps);
    focus(): void;
    componentWillReceiveProps(nextProps: TagsRawProps): void;
    render(): JSX.Element;
    private onTextErrorsChanged;
    private onFocus;
    private onKeyDown;
    private addNewTag;
    private onSuggestionSelected;
    private onBlur;
    private onClickOutside;
    private onTextChanged;
    private handleErrors;
    private getErrors;
    private fetchExistingTags;
    private getSuggestions;
    private renderTag;
    private tagRemoveClick;
    private renderTags;
}
export declare const Tags: React.StatelessComponent<TagsProps>;
export default Tags;
