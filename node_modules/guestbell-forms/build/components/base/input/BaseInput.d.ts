import * as React from 'react';
import * as Validators from '../../../validators';
import { FormContextProps } from '../../form/FormContext';
export interface ComponentApi {
    focus: () => void;
    touch: () => void;
    unTouch: () => void;
    enableComponent: () => void;
    disableComponent: () => void;
    scrollTo: () => void;
}
export declare type ValidationError = string | JSX.Element;
export declare type AllowedHtmlElements = (HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement);
export declare type BaseInputProps<HTMLType extends AllowedHtmlElements> = {
    disabled?: boolean;
    className?: string;
    label?: string | JSX.Element;
    tooltip?: string | JSX.Element;
    tooltipProps?: any;
    value?: string;
    onChange?: (e: React.ChangeEvent<HTMLType>, isValid: boolean) => void;
    required?: boolean;
    customValidators?: Validators.IBaseValidator[];
    validators?: Validators.ValidatorTypes[];
    noValidate?: boolean;
    validationName?: string;
    touchOn?: 'focus' | 'blur';
    ignoreContext?: boolean;
    onTheFlightValidate?: (value: string) => boolean;
    onFocus?: (e: React.SyntheticEvent<{}>) => void;
    onBlur?: () => void;
    title?: string | JSX.Element;
    onKeyDown?: (e: React.KeyboardEvent<HTMLElement>) => void;
    errors?: ValidationError[];
    onErrorsChanged?: (errors: ValidationError[]) => void;
    showValidation?: boolean;
    reRendersWhenContextChanges?: boolean;
} & FormContextProps;
export interface BaseInputState {
    isValid: boolean;
    value: string;
    errors: ValidationError[];
    validator: undefined;
    touched: boolean;
    disabled: boolean;
    focused: boolean;
    handleValueChangeEnabled: boolean;
}
export declare class BaseInput<P extends BaseInputProps<HTMLType>, S extends BaseInputState, HTMLType extends AllowedHtmlElements> extends React.Component<P, S> implements ComponentApi {
    static defaultProps: BaseInputProps<never>;
    componentId: string;
    inputRef: React.Ref<HTMLType> | React.RefObject<HTMLType>;
    protected containerRef: React.Ref<HTMLDivElement> | React.RefObject<HTMLDivElement>;
    private lastValidation;
    constructor(props: P, subscribe?: boolean);
    protected getValidationClass(extraErrors?: ValidationError[]): "validation__success" | "validation__error";
    protected renderDefaultValidation(extraErrors?: ValidationError[]): JSX.Element;
    componentWillUnmount(): void;
    componentWillReceiveProps(nextProps: P): void;
    scrollTo(): void;
    touch(): void;
    unTouch(): void;
    disableComponent(): void;
    enableComponent(): void;
    focus(): void;
    protected handleChange(event: React.ChangeEvent<HTMLType>, isValid?: boolean, errors?: ValidationError[]): void;
    protected subscribeSelf(props: P): void;
    protected handleBlur(e: React.FocusEvent<HTMLType>): void;
    protected handleFocus(e: React.FocusEvent<HTMLType>): void;
    protected getDisabled(): P["disabled"];
    protected setValid(): void;
    protected setInvalid(errors?: ValidationError[]): void;
    protected renderLabel(touchable?: boolean): JSX.Element;
    protected renderTitle(): P["title"];
    shouldComponentUpdate(nextProps: P, nextState: S): boolean;
    protected handleValueChange(value: string, isValid?: boolean, errors?: ValidationError[], props?: P, initializing?: boolean): {
        isValid: boolean;
        errors: ValidationError[];
    };
    private renderTooltip;
}
export default BaseInput;
