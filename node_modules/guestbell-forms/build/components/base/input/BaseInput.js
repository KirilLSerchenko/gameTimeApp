"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.BaseInput = void 0;

var React = _interopRequireWildcard(require("react"));

var ReactDOM = _interopRequireWildcard(require("react-dom"));

var _reactTippy = require("react-tippy");

var Validators = _interopRequireWildcard(require("../../../validators"));

var _Guid = _interopRequireDefault(require("../../utils/Guid"));

var _ShallowEqual = require("../../utils/ShallowEqual");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var BaseInput =
/*#__PURE__*/
function (_React$Component) {
  _inherits(BaseInput, _React$Component);

  function BaseInput(props) {
    var _this;

    var subscribe = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    _classCallCheck(this, BaseInput);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(BaseInput).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "componentId", (0, _Guid.default)());

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "inputRef", void 0);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "containerRef", void 0);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "lastValidation", void 0);

    var res = _this.handleValueChange(_this.props.value, true, [], props, true);

    _this.state = {
      isValid: res.isValid,
      errors: res.errors,
      value: props.value ? props.value : '',
      touched: false,
      disabled: false,
      focused: false,
      handleValueChangeEnabled: true
    };
    _this.containerRef = React.createRef();
    _this.inputRef = React.createRef();
    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.handleBlur = _this.handleBlur.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.handleFocus = _this.handleFocus.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.setValid = _this.setValid.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.focus = _this.focus.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.scrollTo = _this.scrollTo.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.setInvalid = _this.setInvalid.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.disableComponent = _this.disableComponent.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.enableComponent = _this.enableComponent.bind(_assertThisInitialized(_assertThisInitialized(_this)));

    if (subscribe) {
      _this.subscribeSelf(props);
    }

    return _this;
  }

  _createClass(BaseInput, [{
    key: "getValidationClass",
    value: function getValidationClass(extraErrors) {
      if (!this.props.showValidation || !this.state.touched) {
        return 'validation__success';
      }

      return this.state.isValid && (!this.props.errors || this.props.errors.length === 0) && (!this.state.errors || this.state.errors.length === 0) && (!extraErrors || extraErrors.length === 0) ? 'validation__success' : 'validation__error';
    }
  }, {
    key: "renderDefaultValidation",
    value: function renderDefaultValidation(extraErrors) {
      if (!this.props.showValidation) {
        return null;
      }

      var finalErrors = this.state.errors;

      if (!finalErrors) {
        finalErrors = [];
      }

      if (extraErrors) {
        finalErrors = finalErrors.concat(extraErrors);
      }

      if (this.props.errors) {
        finalErrors = finalErrors.concat(this.props.errors);
      }

      finalErrors = finalErrors.filter(function (i) {
        return i;
      });

      if (finalErrors.length > 0) {
        this.lastValidation = finalErrors.map(function (item, index) {
          return React.createElement("li", {
            key: index,
            className: "validation__item"
          }, item);
        });
      }

      return React.createElement("div", {
        className: "validation__container"
      }, React.createElement("ul", {
        className: "validation__ul"
      }, this.lastValidation));
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (!this.props.ignoreContext) {
        this.props.formContext && this.props.formContext.unSubscribe(this.componentId);
      }
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.value !== this.props.value || nextProps.validators !== this.props.validators || nextProps.customValidators !== this.props.customValidators || nextProps.required !== this.props.required) {
        this.handleValueChange(nextProps.value, true, [], nextProps);
      }
    }
  }, {
    key: "scrollTo",
    value: function scrollTo() {
      var domNode = ReactDOM.findDOMNode(this.containerRef.current);
      domNode && domNode.scrollIntoView({
        behavior: 'smooth'
      });
    }
  }, {
    key: "touch",
    value: function touch() {
      this.setState({
        touched: true
      });
      this.handleValueChange(this.state.value || '');
    }
  }, {
    key: "unTouch",
    value: function unTouch() {
      this.setState({
        touched: false
      });
    }
  }, {
    key: "disableComponent",
    value: function disableComponent() {
      this.setState({
        disabled: true
      });
    }
  }, {
    key: "enableComponent",
    value: function enableComponent() {
      this.setState({
        disabled: false
      });
    }
  }, {
    key: "focus",
    value: function focus() {
      if (this.inputRef) {
        var domNode = ReactDOM.findDOMNode(this.inputRef.current);
        domNode && domNode.focus();
      }

      this.touch();
    }
  }, {
    key: "handleChange",
    value: function handleChange(event, isValid) {
      var errors = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var value = event.target.value;

      if (!this.props.onTheFlightValidate || this.props.onTheFlightValidate && this.props.onTheFlightValidate(value)) {
        var res = this.handleValueChange(value, isValid, errors);

        if (this.props.onChange) {
          this.props.onChange(event, res.isValid);
        }
      }
    }
  }, {
    key: "subscribeSelf",
    value: function subscribeSelf(props) {
      if (!props.ignoreContext && props.formContext) {
        props.formContext.subscribe(this.componentId, {
          componentApi: {
            disableComponent: this.disableComponent,
            enableComponent: this.enableComponent,
            touch: this.touch,
            unTouch: this.unTouch,
            scrollTo: this.scrollTo,
            focus: this.focus
          },
          validation: {
            isValid: this.state.isValid,
            errors: this.state.errors,
            name: this.props.validationName ? this.props.validationName : this.props.title ? this.props.title : this.props.label
          }
        });
      }
    }
  }, {
    key: "handleBlur",
    value: function handleBlur(e) {
      this.props.onBlur && this.props.onBlur();
      var state = {
        focused: false
      };

      if (!this.state.touched && this.props.touchOn === 'blur') {
        state = Object.assign(state, {
          touched: true
        });
        this.handleValueChange(this.state.value);
      }

      this.setState(state);
    }
  }, {
    key: "handleFocus",
    value: function handleFocus(e) {
      this.props.onFocus && this.props.onFocus(e);
      var state = {
        focused: true
      };

      if (!this.state.touched && this.props.touchOn === 'focus') {
        state = Object.assign(state, {
          touched: true
        });
        this.handleValueChange(this.state.value);
      }

      this.setState(state);
    }
  }, {
    key: "getDisabled",
    value: function getDisabled() {
      return this.state.disabled ? this.state.disabled : this.props.disabled;
    }
  }, {
    key: "setValid",
    value: function setValid() {
      var _this2 = this;

      this.setState(function () {
        return {
          isValid: true,
          errors: []
        };
      }, function () {
        if (!_this2.props.ignoreContext) {
          _this2.props.formContext && _this2.props.formContext.updateCallback(_this2.componentId, {
            validation: {
              isValid: true,
              errors: []
            }
          });
        }
      });
    }
  }, {
    key: "setInvalid",
    value: function setInvalid() {
      var _this3 = this;

      var errors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      this.setState(function () {
        return {
          isValid: false,
          errors: errors
        };
      }, function () {
        if (!_this3.props.ignoreContext) {
          _this3.props.formContext && _this3.props.formContext.updateCallback(_this3.componentId, {
            validation: {
              isValid: false,
              errors: errors
            }
          });
        }
      });
    }
  }, {
    key: "renderLabel",
    value: function renderLabel() {
      var touchable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      if (!this.props.tooltip || this.props.tooltip && this.props.title) {
        return React.createElement("span", {
          className: touchable ? '' : 'label--no-touch'
        }, this.props.label);
      }

      return React.createElement(React.Fragment, null, React.createElement("span", {
        className: touchable ? '' : 'label--no-touch'
      }, this.props.label), this.renderTooltip());
    }
  }, {
    key: "renderTitle",
    value: function renderTitle() {
      if (!this.props.tooltip) {
        return this.props.title;
      }

      return React.createElement(React.Fragment, null, this.props.title, this.renderTooltip());
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      var shouldUpdate = !(0, _ShallowEqual.shallowEqual)(this.props, nextProps, !this.props.reRendersWhenContextChanges ? 'formContext' : undefined) || !(0, _ShallowEqual.shallowEqual)(this.state, nextState);
      return shouldUpdate;
    }
  }, {
    key: "handleValueChange",
    value: function handleValueChange(value) {
      var isValid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var errors = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var props = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.props;
      var initializing = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

      if (!initializing && !this.state.handleValueChangeEnabled) {
        return {
          isValid: isValid,
          errors: []
        };
      }

      if (props.required && !value) {
        errors.push('Required');
        isValid = false;
      } else {
        if (!props.required && !value) {
          isValid = true;
        } else {
          if (props.validators) {
            isValid = true;
            props.validators.forEach(function (validator) {
              var validInner = false;

              switch (validator) {
                case 'email':
                  validInner = new Validators.EmailValidator().Validate(value, props.required, function (error) {
                    return errors.push(error);
                  });
                  break;

                case 'number':
                  validInner = new Validators.NumberValidator().Validate(value, props.required, function (error) {
                    return errors.push(error);
                  });
                  break;

                case 'latitude':
                  validInner = new Validators.LatitudeValidator().Validate(value, props.required, function (error) {
                    return errors.push(error);
                  });
                  break;

                case 'longitude':
                  validInner = new Validators.LongitudeValidator().Validate(value, props.required, function (error) {
                    return errors.push(error);
                  });
                  break;

                case 'url':
                  validInner = new Validators.UrlValidator().Validate(value, props.required, function (error) {
                    return errors.push(error);
                  });
                  break;

                default:
                  throw new Error("Validator ".concat(validator, " not implemented"));
              }

              if (isValid && !validInner) {
                isValid = validInner;
              }
            });
          }

          if (props.customValidators) {
            props.customValidators.forEach(function (customValidator) {
              var validInner = false;
              validInner = customValidator.Validate(value, props.required, function (error) {
                return errors.push(error);
              });

              if (isValid && !validInner) {
                isValid = validInner;
              }
            });
          }
        }
      }

      props.onErrorsChanged && props.onErrorsChanged(errors);

      if (!initializing) {
        this.setState({
          value: value,
          isValid: isValid,
          errors: errors
        });

        if (!props.ignoreContext) {
          props.formContext && props.formContext.updateCallback(this.componentId, {
            validation: {
              isValid: isValid,
              errors: errors
            }
          });
        }
      }

      return {
        isValid: isValid,
        errors: errors
      };
    }
  }, {
    key: "renderTooltip",
    value: function renderTooltip() {
      return React.createElement(_reactTippy.Tooltip, _extends({
        html: this.props.tooltip,
        position: "bottom",
        trigger: "mouseenter",
        interactive: true,
        className: "label--help-icon__container",
        animateFill: false
      }, this.props.tooltipProps), React.createElement("span", {
        className: "label--help-icon"
      }, "?"));
    }
  }]);

  return BaseInput;
}(React.Component);

exports.BaseInput = BaseInput;

_defineProperty(BaseInput, "defaultProps", {
  className: undefined,
  required: false,
  label: undefined,
  disabled: false,
  touchOn: 'focus',
  ignoreContext: false,
  showValidation: true,
  formContext: undefined,
  reRendersWhenContextChanges: false
});

var _default = BaseInput;
exports.default = _default;
//# sourceMappingURL=BaseInput.js.map