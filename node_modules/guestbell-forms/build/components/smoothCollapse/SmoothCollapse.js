"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SmoothCollapse = void 0;

var React = _interopRequireWildcard(require("react"));

var _kefir = _interopRequireDefault(require("kefir"));

var _kefirBus = _interopRequireDefault(require("kefir-bus"));

var _getTransitionTimeMs = _interopRequireDefault(require("./getTransitionTimeMs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var SmoothCollapse =
/*#__PURE__*/
function (_React$PureComponent) {
  _inherits(SmoothCollapse, _React$PureComponent);

  function SmoothCollapse(props) {
    var _this;

    _classCallCheck(this, SmoothCollapse);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SmoothCollapse).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_resetter", (0, _kefirBus.default)());

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_mainEl", null);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_innerEl", null);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_mainElSetter", function (el) {
      _this._mainEl = el;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_innerElSetter", function (el) {
      _this._innerEl = el;
    });

    _this.state = {
      hasBeenVisibleBefore: props.expanded || _this._visibleWhenClosed(props),
      fullyClosed: !props.expanded,
      height: props.expanded ? 'auto' : props.collapsedHeight
    };
    return _this;
  }

  _createClass(SmoothCollapse, [{
    key: "_visibleWhenClosed",
    value: function _visibleWhenClosed(props) {
      if (!props) {
        props = this.props;
      }

      return parseFloat(props.collapsedHeight) !== 0;
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._resetter.emit(null);
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var _this2 = this;

      if (!this.props.expanded && nextProps.expanded) {
        this._resetter.emit(null); // In order to expand, we need to know the height of the children, so we
        // need to setState first so they get rendered before we continue.


        this.setState({
          fullyClosed: false,
          hasBeenVisibleBefore: true
        }, function () {
          var mainEl = _this2._mainEl;
          var innerEl = _this2._innerEl;

          if (!mainEl || !innerEl) {
            throw new Error('Should not happen');
          } // Set the collapser to the target height instead of auto so that it
          // animates correctly. Then switch it to 'auto' after the animation so
          // that it flows correctly if the page is resized.


          var targetHeight = "".concat(innerEl.clientHeight, "px");

          _this2.setState({
            height: targetHeight
          }); // Wait until the transitionend event, or until a timer goes off in
          // case the event doesn't fire because the browser doesn't support it
          // or the element is hidden before it happens. The timer is a little
          // longer than the transition is supposed to take to make sure we don't
          // cut the animation early while it's still going if the browser is
          // running it just a little slow.


          _kefir.default.fromEvents(mainEl, 'transitionend').merge(_kefir.default.later((0, _getTransitionTimeMs.default)(nextProps.heightTransition) * 1.1 + 500)).takeUntilBy(_this2._resetter).take(1).onValue(function () {
            _this2.setState({
              height: 'auto'
            }, function () {
              if (_this2.props.onChangeEnd) {
                _this2.props.onChangeEnd();
              }
            });
          });
        });
      } else if (this.props.expanded && !nextProps.expanded) {
        this._resetter.emit(null);

        if (!this._innerEl) {
          throw new Error('Should not happen');
        }

        this.setState({
          height: "".concat(this._innerEl.clientHeight, "px")
        }, function () {
          var mainEl = _this2._mainEl;

          if (!mainEl) {
            throw new Error('Should not happen');
          } // tslint:disable-next-line:no-unused-expression


          mainEl.clientHeight; // force the page layout

          _this2.setState({
            height: nextProps.collapsedHeight
          }); // See comment above about previous use of transitionend event.


          _kefir.default.fromEvents(mainEl, 'transitionend').merge(_kefir.default.later((0, _getTransitionTimeMs.default)(nextProps.heightTransition) * 1.1 + 500)).takeUntilBy(_this2._resetter).take(1).onValue(function () {
            _this2.setState({
              fullyClosed: true
            });

            if (_this2.props.onChangeEnd) {
              _this2.props.onChangeEnd();
            }
          });
        });
      } else if (!nextProps.expanded && this.props.collapsedHeight !== nextProps.collapsedHeight) {
        this.setState({
          hasBeenVisibleBefore: this.state.hasBeenVisibleBefore || this._visibleWhenClosed(nextProps),
          height: nextProps.collapsedHeight
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var visibleWhenClosed = this._visibleWhenClosed();

      var allowOverflowWhenOpen = this.props.allowOverflowWhenOpen;
      var _this$state = this.state,
          height = _this$state.height,
          fullyClosed = _this$state.fullyClosed,
          hasBeenVisibleBefore = _this$state.hasBeenVisibleBefore;
      var innerEl = hasBeenVisibleBefore ? React.createElement("div", {
        ref: this._innerElSetter,
        style: {
          overflow: allowOverflowWhenOpen && height === 'auto' ? 'visible' : 'hidden'
        }
      }, this.props.children) : null;
      return React.createElement("div", {
        ref: this._mainElSetter,
        className: this.props.className,
        style: {
          height: height,
          overflow: allowOverflowWhenOpen && height === 'auto' ? 'visible' : 'hidden',
          display: fullyClosed && !visibleWhenClosed ? 'none' : null,
          transition: "height ".concat(this.props.heightTransition)
        }
      }, innerEl);
    }
  }]);

  return SmoothCollapse;
}(React.PureComponent);

exports.SmoothCollapse = SmoothCollapse;

_defineProperty(SmoothCollapse, "defaultProps", {
  collapsedHeight: '0',
  heightTransition: '.25s ease',
  className: '',
  allowOverflowWhenOpen: false
});

var _default = SmoothCollapse;
exports.default = _default;
//# sourceMappingURL=SmoothCollapse.js.map