import * as React from 'react';
import { BaseInputProps, BaseInputState, BaseInput } from '../base/input/BaseInput';
import { ButtonProps } from '../button/Button';
import { OmitFormContext } from '../form/FormContext';
declare type SubmitRawProps = BaseInputProps<never> & ButtonProps & {
    onClick?: (e: React.MouseEvent<HTMLButtonElement>) => void;
    validateForm?: boolean;
    disabledTitle?: string;
    showValidationSummaryTooltip?: boolean;
};
export declare type SubmitProps = OmitFormContext<SubmitRawProps>;
export interface SubmitState extends BaseInputState {
}
export declare class SubmitRaw extends BaseInput<SubmitRawProps, SubmitState, never> {
    static defaultProps: {
        disabled?: boolean;
        className?: string;
        label?: string | JSX.Element;
        tooltip?: string | JSX.Element;
        tooltipProps?: any;
        value?: string;
        onChange?: (e: React.ChangeEvent<never>, isValid: boolean) => void;
        required?: boolean;
        customValidators?: import("../../validators/base").IBaseValidator[];
        validators?: ("number" | "email" | "latitude" | "longitude" | "url")[];
        noValidate?: boolean;
        validationName?: string;
        touchOn?: "focus" | "blur";
        ignoreContext?: boolean;
        onTheFlightValidate?: (value: string) => boolean;
        onFocus?: (e: React.SyntheticEvent<{}>) => void;
        onBlur?: () => void;
        title?: string | JSX.Element;
        onKeyDown?: (e: React.KeyboardEvent<HTMLElement>) => void;
        errors?: (string | JSX.Element)[];
        onErrorsChanged?: (errors: (string | JSX.Element)[]) => void;
        showValidation?: boolean;
        reRendersWhenContextChanges?: boolean;
    } & import("../form/FormContext").FormContextProps & {
        validateForm: boolean;
        ignoreContext: boolean;
        reRendersWhenContextChanges: boolean;
        showValidationSummaryTooltip: boolean;
    };
    constructor(props: SubmitRawProps);
    render(): JSX.Element;
    private handleClick;
    private isDisabled;
}
export declare const Submit: React.StatelessComponent<Pick<SubmitRawProps, "onClick" | "style" | "className" | "disabled" | "type" | "circular" | "noRipples" | "small" | "icon" | "outlined" | "disableAfterClickMs" | "buttonProps" | "hero" | "noShadow" | "blank" | "dropdown" | "Component" | "tooltip" | "tooltipProps" | "label" | "value" | "onChange" | "required" | "customValidators" | "validators" | "noValidate" | "validationName" | "touchOn" | "ignoreContext" | "onTheFlightValidate" | "onFocus" | "onBlur" | "title" | "onKeyDown" | "errors" | "onErrorsChanged" | "showValidation" | "reRendersWhenContextChanges" | "validateForm" | "disabledTitle" | "showValidationSummaryTooltip">>;
export default Submit;
