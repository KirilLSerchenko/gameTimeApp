"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NumberValidator = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var NumberValidator =
/*#__PURE__*/
function () {
  function NumberValidator() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      min: undefined,
      max: undefined
    };

    _classCallCheck(this, NumberValidator);

    _defineProperty(this, "config", void 0);

    this.config = config;
  }

  _createClass(NumberValidator, [{
    key: "Validate",
    value: function Validate(value, isRequired, addError) {
      var num = Number(value);

      if (!isNaN(num)) {
        if (this.config.min !== undefined && num <= this.config.min) {
          addError('Min: ' + this.config.min);
          return false;
        }

        if (this.config.max !== undefined && num >= this.config.max) {
          addError('Max: ' + (this.config.max - 1));
          return false;
        }

        return true;
      }

      addError('Invalid number');
      return false;
    }
  }]);

  return NumberValidator;
}();

exports.NumberValidator = NumberValidator;
//# sourceMappingURL=NumberValidator.js.map