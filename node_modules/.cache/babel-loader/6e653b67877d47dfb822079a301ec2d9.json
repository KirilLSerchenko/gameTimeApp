{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.Form = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _FormContext = require(\"./FormContext\");\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar Form =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(Form, _React$PureComponent);\n\n  function Form(props) {\n    var _this;\n\n    _classCallCheck(this, Form);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Form).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onSubmit\", function (e) {\n      e.preventDefault();\n      _this.props.onSubmit && _this.props.onSubmit();\n    });\n\n    _this.subscribe = _this.subscribe.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.unSubscribe = _this.unSubscribe.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateCallback = _this.updateCallback.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.disableComponents = _this.disableComponents.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.enableComponents = _this.enableComponents.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      contextState: {\n        subscribe: _this.subscribe,\n        unSubscribe: _this.unSubscribe,\n        isFormValid: true,\n        updateCallback: _this.updateCallback,\n        disableComponents: _this.disableComponents,\n        enableComponents: _this.enableComponents,\n        components: {}\n      }\n    };\n    return _this;\n  }\n\n  _createClass(Form, [{\n    key: \"disableComponents\",\n    value: function disableComponents() {\n      var components = _objectSpread({}, this.state.contextState.components, this.props.extraComponents);\n\n      Object.keys(components).forEach(function (key) {\n        var component = components[key];\n        component && component.componentApi && component.componentApi.disableComponent && component.componentApi.disableComponent();\n      });\n    }\n  }, {\n    key: \"enableComponents\",\n    value: function enableComponents() {\n      var components = _objectSpread({}, this.state.contextState.components, this.props.extraComponents);\n\n      Object.keys(components).forEach(function (key) {\n        var component = components[key];\n        component && component.componentApi && component.componentApi.enableComponent && component.componentApi.enableComponent();\n      });\n    }\n  }, {\n    key: \"touchAll\",\n    value: function touchAll() {\n      var components = _objectSpread({}, this.state.contextState.components, this.props.extraComponents);\n\n      Object.keys(components).forEach(function (key) {\n        var component = components[key];\n        component && component.componentApi && component.componentApi.touch && component.componentApi.touch();\n      });\n    }\n  }, {\n    key: \"unTouchAll\",\n    value: function unTouchAll() {\n      var components = _objectSpread({}, this.state.contextState.components, this.props.extraComponents);\n\n      Object.keys(components).forEach(function (key) {\n        var component = components[key];\n        component && component.componentApi && component.componentApi.unTouch && component.componentApi.unTouch();\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"form\", {\n        noValidate: true,\n        role: \"form\",\n        className: \"input__form validation-form \".concat(this.props.className ? this.props.className : ''),\n        onSubmit: this.onSubmit\n      }, React.createElement(_FormContext.FormContextProvider, {\n        value: this.mergeContext()\n      }, this.props.children));\n    }\n  }, {\n    key: \"mergeContext\",\n    value: function mergeContext() {\n      if (!this.props.extraComponents) {\n        return this.state.contextState;\n      }\n\n      var isFormValid = this.state.contextState.isFormValid && this.getIsFormValid(this.props.extraComponents);\n      return _objectSpread({}, this.state.contextState, {\n        components: _objectSpread({}, this.state.contextState.components, this.props.extraComponents),\n        isFormValid: isFormValid\n      });\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(componentId, componentState) {\n      var _this2 = this;\n\n      if (componentId) {\n        this.setState(function (previousState) {\n          var components = Object.assign({}, previousState.contextState.components);\n\n          if (componentState) {\n            components[componentId] = componentState;\n          }\n\n          var isFormValid = _this2.getIsFormValid(components);\n\n          return {\n            contextState: _objectSpread({}, previousState.contextState, {\n              components: components,\n              isFormValid: isFormValid\n            })\n          };\n        });\n      }\n    }\n  }, {\n    key: \"unSubscribe\",\n    value: function unSubscribe(componentId) {\n      var _this3 = this;\n\n      if (componentId) {\n        this.setState(function (previousState) {\n          var components = Object.assign({}, previousState.contextState.components);\n          delete components[componentId];\n\n          var isFormValid = _this3.getIsFormValid(components);\n\n          return {\n            contextState: _objectSpread({}, previousState.contextState, {\n              components: components,\n              isFormValid: isFormValid\n            })\n          };\n        });\n      }\n    }\n  }, {\n    key: \"getIsFormValid\",\n    value: function getIsFormValid() {\n      var components = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state.contextState.components;\n      var initialValid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var isFormValid = initialValid;\n      Object.keys(components).forEach(function (key) {\n        var component = components[key];\n\n        if (component && component.validation && !component.validation.isValid) {\n          isFormValid = false;\n        }\n      });\n      return isFormValid;\n    }\n  }, {\n    key: \"updateCallback\",\n    value: function updateCallback(componentId, componentState) {\n      var _this4 = this;\n\n      this.setState(function (previousState) {\n        var components = Object.assign({}, previousState.contextState.components);\n        var previousComponent = components[componentId];\n\n        if (componentState && previousComponent) {\n          components[componentId] = _objectSpread({}, previousComponent, componentState, {\n            validation: _objectSpread({}, previousComponent.validation, componentState.validation)\n          });\n        }\n\n        var isFormValid = _this4.getIsFormValid(components);\n\n        return {\n          contextState: _objectSpread({}, _this4.state.contextState, {\n            components: components,\n            isFormValid: isFormValid\n          })\n        };\n      });\n    }\n  }]);\n\n  return Form;\n}(React.PureComponent);\n\nexports.Form = Form;\n\n_defineProperty(Form, \"defaultProps\", {\n  noValidate: false,\n  showExpandAll: true\n});\n\nvar _default = Form;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}