{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Kirill Serchenko\\\\Desktop\\\\gameTimeApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\Kirill Serchenko\\\\Desktop\\\\gameTimeApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Kirill Serchenko\\\\Desktop\\\\gameTimeApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Kirill Serchenko\\\\Desktop\\\\gameTimeApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Kirill Serchenko\\\\Desktop\\\\gameTimeApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Kirill Serchenko\\\\Desktop\\\\gameTimeApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Kirill Serchenko\\\\Desktop\\\\gameTimeApp\\\\src\\\\Components\\\\EditPlayer\\\\EditPlayer.js\";\nimport React, { Component } from 'react';\nimport { PageHeader, FormGroup, FormControl, Button } from 'react-bootstrap';\nimport { withRouter } from \"react-router-dom\";\nimport './EditPlayer.css';\n\nvar EditPlayer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EditPlayer, _Component);\n\n  function EditPlayer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EditPlayer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EditPlayer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      validationStatus: \"error\",\n      //validation status sets only in first input\n      value1: \"\",\n      //value of first input\n      value2: \"\",\n      //value of second input\n      value3: 1,\n      //value of rating input\n      visibility1: \"hidden\",\n      //visibility of next form\n      visibility2: \"hidden\" //visibility of change button\n      //Change value,validation of first input\n\n    };\n\n    _this.handleChange1 = function (e) {\n      // --------------------------Some conditions to check exist\n      // player,visibility.--------\n      var checkMatchPlayer = _this.props.mainstate.players.find(function (player) {\n        return player.value === e.target.value.split(\" \").join(\"\");\n      }); //check if entered value empty\n\n\n      var validStatus = checkMatchPlayer === undefined ? \"error\" : \"success\";\n      var checkVisibility = checkMatchPlayer === undefined ? \"hidden\" : \"visible\"; //visibility of next form\n      // ---------------------------END------------------------------------\n      // -------------update Current state-------------------------------------------\n\n      _this.setState({\n        validationStatus: validStatus,\n        value1: e.target.value,\n        visibility1: checkVisibility\n      });\n    };\n\n    _this.handleChange2 = function (e) {\n      return _this.setState({\n        value2: e.target.value\n      });\n    };\n\n    _this.changePlayer = function () {\n      var objIndex = _this.props.mainstate.players.findIndex(function (player) {\n        return player.value === _this.state.value1;\n      });\n\n      var tempPlayers = _toConsumableArray(_this.props.mainstate.players); //Update object's name property.\n\n\n      tempPlayers[objIndex] = {\n        value: _this.state.value2,\n        rating: _this.state.value3\n      };\n\n      _this.props.setSt({\n        backdropVisibility: \"visible\",\n        textOfBackdrop: \"Successfully edited player!\",\n        players: _toConsumableArray(tempPlayers)\n      });\n\n      _this.props.history.push('/'); //Pass to home screen\n\n    };\n\n    _this.numChange = function (e) {\n      return _this.setState({\n        value3: e.target.value\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(EditPlayer, [{\n    key: \"render\",\n    //------------------------------------------------------------------------\n    value: function render() {\n      return React.createElement(\"div\", {\n        id: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(PageHeader, {\n        className: \"tracking-in-expand-fwd-top\",\n        id: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"Edit Player\"), React.createElement(\"form\", {\n        id: \"myForm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        controlId: \"formBasicText\",\n        validationState: this.state.validationStatus,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(FormControl, {\n        type: \"text\",\n        maxLength: 20,\n        value: this.state.value1 //value of first input \n        ,\n        placeholder: \"Enter Player Name\",\n        onChange: this.handleChange1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }), React.createElement(FormControl.Feedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }))), React.createElement(\"form\", {\n        id: \"myForm\",\n        style: {\n          visibility: this.state.visibility1\n        },\n        className: this.state.visibility1 === \"visible\" ? \"scale-in-ver-center\" : \"slide-out-bck-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        controlId: \"formBasicText\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(FormControl, {\n        type: \"text\",\n        maxLength: 20,\n        value: this.state.value2,\n        placeholder: \"Enter New Name\",\n        onChange: this.handleChange2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }), \" \", React.createElement(\"input\", {\n        onChange: this.numChange,\n        id: \"inputEdit\",\n        value: this.state.value3,\n        type: \"number\",\n        name: \"quantity\",\n        min: \"1\",\n        max: \"5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }), React.createElement(FormControl.Feedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }))), React.createElement(Button, {\n        bsStyle: \"warning\",\n        onClick: this.changePlayer,\n        style: {\n          visibility: this.state.value2 !== \"\" ? \"visible\" : \"hidden\"\n        } //Appears when second input not empty\n        ,\n        className: this.state.value2 !== \"\" ? \"slide-in-elliptic-top-fwd\" : null,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"Change\"));\n    }\n  }]);\n\n  return EditPlayer;\n}(Component);\n\nexport default withRouter(EditPlayer); //HOC Component for get history object","map":{"version":3,"sources":["C:\\Users\\Kirill Serchenko\\Desktop\\gameTimeApp\\src\\Components\\EditPlayer\\EditPlayer.js"],"names":["React","Component","PageHeader","FormGroup","FormControl","Button","withRouter","EditPlayer","state","validationStatus","value1","value2","value3","visibility1","visibility2","handleChange1","e","checkMatchPlayer","props","mainstate","players","find","player","value","target","split","join","validStatus","undefined","checkVisibility","setState","handleChange2","changePlayer","objIndex","findIndex","tempPlayers","rating","setSt","backdropVisibility","textOfBackdrop","history","push","numChange","visibility"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport {PageHeader, FormGroup, FormControl, Button} from 'react-bootstrap'\r\nimport {withRouter} from \"react-router-dom\"\r\nimport './EditPlayer.css'\r\n\r\nclass EditPlayer extends Component {\r\n\r\n    state = {\r\n        validationStatus: \"error\", //validation status sets only in first input\r\n        value1: \"\", //value of first input\r\n        value2: \"\", //value of second input\r\n        value3: 1, //value of rating input\r\n        visibility1: \"hidden\", //visibility of next form\r\n        visibility2: \"hidden\" //visibility of change button\r\n    }\r\n\r\n    //Change value,validation of first input\r\n    handleChange1 = (e) => {\r\n        // --------------------------Some conditions to check exist\r\n        // player,visibility.--------\r\n        const checkMatchPlayer = this\r\n            .props\r\n            .mainstate\r\n            .players\r\n            .find(player => player.value === e.target.value.split(\" \").join(\"\")) //check if entered value empty\r\n        const validStatus = checkMatchPlayer === undefined\r\n            ? \"error\"\r\n            : \"success\"\r\n        const checkVisibility = checkMatchPlayer === undefined\r\n            ? \"hidden\"\r\n            : \"visible\" //visibility of next form\r\n        // ---------------------------END------------------------------------\r\n        // -------------update Current state-------------------------------------------\r\n        this.setState({validationStatus: validStatus, value1: e.target.value, visibility1: checkVisibility})\r\n    }\r\n    // ----------------------------END------------------------------------\r\n    // ----------------Change value of second\r\n    // input-------------------------------------\r\n    handleChange2 = (e) => this.setState({value2: e.target.value})\r\n    // -------------------------END------------------------------------------------\r\n    // ------------------------Change player logic----------------------------------\r\n    changePlayer = () => {\r\n        let objIndex = this\r\n            .props\r\n            .mainstate\r\n            .players\r\n            .findIndex(player => player.value === this.state.value1);\r\n        let tempPlayers = [...this.props.mainstate.players]\r\n        //Update object's name property.\r\n        tempPlayers[objIndex] = {\r\n            value: this.state.value2,\r\n            rating: this.state.value3\r\n        }\r\n        this\r\n            .props\r\n            .setSt({\r\n                backdropVisibility: \"visible\",\r\n                textOfBackdrop: \"Successfully edited player!\",\r\n                players: [...tempPlayers]\r\n            })\r\n        this\r\n            .props\r\n            .history\r\n            .push('/'); //Pass to home screen\r\n    }\r\n    // -----------------------------------------------------------------------------\r\n    // - ---\r\n\r\n    /*Change Rating of Player*/\r\n    numChange = (e) => this.setState({value3: e.target.value})\r\n    //------------------------------------------------------------------------\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"container\">\r\n                {/*--------------------------Component Header-------------------------------------------*/}\r\n                <PageHeader className=\"tracking-in-expand-fwd-top\" id=\"header\">Edit Player</PageHeader>\r\n\r\n                {/*-----------------------------First Form for search player to edit----------------------------------------------------- */}\r\n                <form id=\"myForm\">\r\n                    <FormGroup\r\n                        controlId=\"formBasicText\"\r\n                        validationState={this.state.validationStatus}>{/*Validation status error*/}\r\n\r\n                        <FormControl type=\"text\" maxLength={20} value={this.state.value1} //value of first input \r\n                            placeholder=\"Enter Player Name\" onChange={this.handleChange1}/>\r\n                        <FormControl.Feedback/>\r\n                    </FormGroup>\r\n                </form>\r\n\r\n                {/*------------------------------Second Form Appears when player exist in db-------------------------------- */}\r\n                <form\r\n                    id=\"myForm\"\r\n                    style={{\r\n                    visibility: this.state.visibility1\r\n                }}\r\n                    className={this.state.visibility1 === \"visible\"\r\n                    ? \"scale-in-ver-center\"\r\n                    : \"slide-out-bck-center\"}>{/*Change class name for animation according visibility1*/}\r\n                    <FormGroup controlId=\"formBasicText\">\r\n                        <FormControl\r\n                            type=\"text\"\r\n                            maxLength={20}\r\n                            value={this.state.value2}\r\n                            placeholder=\"Enter New Name\"\r\n                            onChange={this.handleChange2}/> {/*-------------------------------------------Rating Change input with number type------------------------------------------ */}\r\n                        <input\r\n                            onChange={this.numChange}\r\n                            id=\"inputEdit\"\r\n                            value={this.state.value3}\r\n                            type=\"number\"\r\n                            name=\"quantity\"\r\n                            min=\"1\"\r\n                            max=\"5\"/>\r\n                        <FormControl.Feedback/>\r\n                    </FormGroup>\r\n                </form>\r\n\r\n                {/*------------------------------------------------------Make changes Button------------------------------------------------------------- */}\r\n                <Button bsStyle=\"warning\" onClick={this.changePlayer} style={{\r\n                    visibility: this.state.value2 !== \"\"\r\n                        ? \"visible\"\r\n                        : \"hidden\"\r\n                }} //Appears when second input not empty\r\n                    className={this.state.value2 !== \"\"\r\n                    ? \"slide-in-elliptic-top-fwd\"\r\n                    : null}>\r\n                    Change\r\n                </Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(EditPlayer); //HOC Component for get history object"]},"metadata":{},"sourceType":"module"}