{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\kiril\\\\Desktop\\\\gameTimeApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\kiril\\\\Desktop\\\\gameTimeApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\kiril\\\\Desktop\\\\gameTimeApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\kiril\\\\Desktop\\\\gameTimeApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\kiril\\\\Desktop\\\\gameTimeApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\kiril\\\\Desktop\\\\gameTimeApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\kiril\\\\Desktop\\\\gameTimeApp\\\\src\\\\Components\\\\AddPlayer\\\\AddPlayer.js\";\nimport React, { Component } from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport { PageHeader, FormGroup, Button, FormControl } from 'react-bootstrap';\nimport StarRatingComponent from 'react-star-rating-component';\nimport './AddPlayer.css';\n\nvar AddPlayer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AddPlayer, _Component);\n\n  function AddPlayer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AddPlayer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AddPlayer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      value: '',\n      //Input value\n      rating: 1,\n      //Players rating value\n      validationStatus: \"error\" //Validation status check if the field not empty\n\n      /*-----------------------Change value of input------------------------ */\n\n    };\n\n    _this.handleChange = function (e) {\n      return _this.setState({\n        value: e.target.value\n      });\n    };\n\n    _this.onStarClick = function (nextValue) {\n      return _this.setState({\n        rating: nextValue\n      });\n    };\n\n    _this.postDataOnServer = function (value, rating) {\n      var url = 'http://localhost:3000/user';\n      var data = {\n        id: 0,\n        name: value,\n        rating: rating\n      };\n      fetch(url, {\n        method: 'POST',\n        // or 'PUT'\n        body: JSON.stringify(data),\n        // data can be `string` or {object}!\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(function (res) {\n        return res.json();\n      }).then(function (response) {\n        return console.log('Success:', JSON.stringify(response));\n      }).catch(function (error) {\n        return console.error('Error:', error);\n      });\n    };\n\n    _this.addClicked = function (value, rating) {\n      _this.putDataOnServer(value, rating);\n\n      var temp = _this.props.mainstate.players;\n      temp.push({\n        value: value,\n        rating: rating\n      });\n\n      _this.props.setSt({\n        backdropVisibility: \"visible\",\n        textOfBackdrop: \"Successfully added new player!\",\n        players: _toConsumableArray(temp)\n      });\n\n      _this.props.history.push('/'); //Pass to Home screen page\n\n    };\n\n    return _this;\n  }\n\n  _createClass(AddPlayer, [{\n    key: \"render\",\n\n    /*-----------------------------------END------------------------------------------------*/\n\n    /*---------------------Render Function--------------------------------------------------*/\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          rating = _this$state.rating,\n          value = _this$state.value; //take rating and value property from current state\n\n      var validationStatus = this.state.value === \"\".slice(\" \") ? \"error\" : \"success\"; //check validation status of input if empty error else success\n\n      return React.createElement(\"div\", {\n        id: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(PageHeader, {\n        className: \"tracking-in-expand-fwd-top\",\n        id: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"AddPlayer\"), React.createElement(\"form\", {\n        id: \"myForm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        controlId: \"formBasicText\",\n        validationState: validationStatus,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(FormControl, {\n        type: \"text\",\n        maxLength: 20,\n        value: value,\n        placeholder: \"Enter Player Name\",\n        onChange: function onChange(e) {\n          return _this2.handleChange(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }), React.createElement(FormControl.Feedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }), React.createElement(StarRatingComponent, {\n        name: \"rate1\",\n        starCount: 5,\n        value: rating,\n        onStarClick: this.onStarClick.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }))), React.createElement(Button, {\n        onClick: function onClick() {\n          return _this2.addClicked(_this2.state.value, _this2.state.rating);\n        },\n        className: this.state.value === \"\".slice(\" \") ? null : \"jello-diagonal-2\",\n        bsStyle: \"primary\",\n        type: \"submit\",\n        disabled: this.state.value === \"\".slice(\" \") ? true : false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        class: \"fas fa-plus\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"\\xA0 Add\")));\n    }\n    /*------------------------------------------------END Render--------------------------------------*/\n\n  }]);\n\n  return AddPlayer;\n}(Component);\n\nexport default withRouter(AddPlayer); //withRouter HOC component for get history object.","map":{"version":3,"sources":["C:\\Users\\kiril\\Desktop\\gameTimeApp\\src\\Components\\AddPlayer\\AddPlayer.js"],"names":["React","Component","withRouter","PageHeader","FormGroup","Button","FormControl","StarRatingComponent","AddPlayer","state","value","rating","validationStatus","handleChange","e","setState","target","onStarClick","nextValue","postDataOnServer","url","data","id","name","fetch","method","body","JSON","stringify","headers","then","res","json","response","console","log","catch","error","addClicked","putDataOnServer","temp","props","mainstate","players","push","setSt","backdropVisibility","textOfBackdrop","history","slice","bind"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {PageHeader, FormGroup, Button, FormControl} from 'react-bootstrap'\r\nimport StarRatingComponent from 'react-star-rating-component';\r\nimport './AddPlayer.css'\r\n\r\nclass AddPlayer extends Component {\r\n\r\n    state = {\r\n        value: '', //Input value\r\n        rating: 1, //Players rating value\r\n        validationStatus: \"error\", //Validation status check if the field not empty\r\n    }\r\n\r\n    /*-----------------------Change value of input------------------------ */\r\n    handleChange = (e) => this.setState({value: e.target.value});\r\n    /*------------------------END-----------------------------------------*/\r\n\r\n    /*-----------------------Change value of stars rating----------------*/\r\n    onStarClick = (nextValue) => this.setState({rating: nextValue});\r\n    /*-----------------------END----------------*/\r\n\r\n\r\n    postDataOnServer =(value,rating) => {\r\n        let url = 'http://localhost:3000/user';\r\n        let data = {\r\n            id:0,\r\n            name:value,\r\n            rating:rating\r\n        };\r\n\r\n        fetch(url, {\r\n            method: 'POST', // or 'PUT'\r\n            body: JSON.stringify(data), // data can be `string` or {object}!\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n            .then(res => res.json())\r\n            .then(response => console.log('Success:', JSON.stringify(response)))\r\n            .catch(error => console.error('Error:', error));\r\n    }\r\n\r\n\r\n    /*------------------------Add New Player when the user clicked on add button-----------*/\r\n    addClicked = (value, rating) => {\r\n        this.putDataOnServer(value,rating)\r\n        let temp = this.props.mainstate.players\r\n        temp.push({value, rating})\r\n        this\r\n            .props\r\n            .setSt({\r\n                backdropVisibility: \"visible\",\r\n                textOfBackdrop: \"Successfully added new player!\",\r\n                players: [...temp]\r\n            })\r\n        this\r\n            .props\r\n            .history\r\n            .push('/') //Pass to Home screen page\r\n    }\r\n    /*-----------------------------------END------------------------------------------------*/\r\n\r\n    /*---------------------Render Function--------------------------------------------------*/\r\n    render() {\r\n        const {rating, value} = this.state; //take rating and value property from current state\r\n        const validationStatus = this.state.value === \"\".slice(\" \")\r\n            ? \"error\"\r\n            : \"success\"; //check validation status of input if empty error else success\r\n\r\n        return (\r\n            <div id=\"container\">\r\n\r\n                {/*----------------------Header --component----------------------------------------------------- */}\r\n                <PageHeader className=\"tracking-in-expand-fwd-top\" id=\"header\">\r\n                    AddPlayer\r\n                </PageHeader>\r\n                {/*----------------------END Header----------------------------------------------------- */}\r\n\r\n                {/*----------------------Form----------------------------------------------------- */}\r\n                <form id=\"myForm\">\r\n                    <FormGroup controlId=\"formBasicText\" validationState={validationStatus}>{/*validation state according validation status*/}\r\n                        <FormControl\r\n                            type=\"text\"\r\n                            maxLength={20}\r\n                            value={value}\r\n                            placeholder=\"Enter Player Name\"\r\n                            onChange={(e) => this.handleChange(e)}/>\r\n                        <FormControl.Feedback/>\r\n\r\n                        <StarRatingComponent\r\n                            name=\"rate1\"\r\n                            starCount={5}\r\n                            value={rating}\r\n                            onStarClick={this\r\n                            .onStarClick\r\n                            .bind(this)}/>\r\n                    </FormGroup>\r\n                </form>\r\n                {/*---------------------END Form----------------------------------------------------------*/}\r\n\r\n                {/*----------------------------Add Button----------------------------------------------- */}\r\n                <Button\r\n                    onClick={() => this.addClicked(this.state.value, this.state.rating)}\r\n                    className={this.state.value === \"\".slice(\" \")\r\n                    ? null\r\n                    : \"jello-diagonal-2\"}\r\n                    bsStyle=\"primary\"\r\n                    type='submit'\r\n                    disabled={this.state.value === \"\".slice(\" \")\r\n                    ? true\r\n                    : false}>\r\n                    <i class=\"fas fa-plus\">&nbsp; Add</i>\r\n                </Button>\r\n                {/*-----END Button------------------------------------------------------------------------*/}\r\n\r\n            </div>\r\n        )\r\n    }\r\n    /*------------------------------------------------END Render--------------------------------------*/\r\n}\r\n\r\nexport default withRouter(AddPlayer); //withRouter HOC component for get history object."]},"metadata":{},"sourceType":"module"}