{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NumberValidator = void 0;\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar NumberValidator =\n/*#__PURE__*/\nfunction () {\n  function NumberValidator() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      min: undefined,\n      max: undefined\n    };\n\n    _classCallCheck(this, NumberValidator);\n\n    _defineProperty(this, \"config\", void 0);\n\n    this.config = config;\n  }\n\n  _createClass(NumberValidator, [{\n    key: \"Validate\",\n    value: function Validate(value, isRequired, addError) {\n      var num = Number(value);\n\n      if (!isNaN(num)) {\n        if (this.config.min !== undefined && num <= this.config.min) {\n          addError('Min: ' + this.config.min);\n          return false;\n        }\n\n        if (this.config.max !== undefined && num >= this.config.max) {\n          addError('Max: ' + (this.config.max - 1));\n          return false;\n        }\n\n        return true;\n      }\n\n      addError('Invalid number');\n      return false;\n    }\n  }]);\n\n  return NumberValidator;\n}();\n\nexports.NumberValidator = NumberValidator;","map":null,"metadata":{},"sourceType":"script"}