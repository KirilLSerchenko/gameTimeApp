{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.Checkbox = exports.CheckboxRaw = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _InputGroup = _interopRequireDefault(require(\"../inputGroup/InputGroup\"));\n\nvar _BaseInput2 = require(\"../base/input/BaseInput\");\n\nvar _withFormContext = require(\"../form/withFormContext\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar classNames = require('classnames');\n\nvar CheckboxRaw =\n/*#__PURE__*/\nfunction (_BaseInput) {\n  _inherits(CheckboxRaw, _BaseInput);\n\n  function CheckboxRaw(props) {\n    var _this;\n\n    _classCallCheck(this, CheckboxRaw);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CheckboxRaw).call(this, props, false));\n    _this.state = Object.assign(_this.state, {\n      checked: props.checked,\n      isValid: props.required ? props.checked : true,\n      errors: props.required && !props.checked ? ['Required'] : []\n    });\n    _this.handleChecked = _this.handleChecked.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n\n    _this.subscribeSelf(props);\n\n    return _this;\n  }\n\n  _createClass(CheckboxRaw, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(newProps) {\n      if (newProps.checked !== this.state.checked) {\n        this.setState({\n          checked: newProps.checked\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var containerClassName = classNames(['input__base checkbox-input', this.getValidationClass(), this.props.className, _defineProperty({}, 'checkbox-input--with-label', Boolean(this.props.label))]);\n      return React.createElement(_InputGroup.default, {\n        title: this.props.title\n      }, React.createElement(\"div\", {\n        className: containerClassName,\n        ref: this.containerRef\n      }, !this.props.label && this.renderInput(), this.renderDefaultValidation(), this.props.label && React.createElement(\"label\", null, this.renderInput(), this.renderLabel())));\n    }\n  }, {\n    key: \"handleChecked\",\n    value: function handleChecked(e) {\n      this.props.onChecked && this.props.onChecked(e);\n      this.setState({\n        checked: !this.state.checked\n      });\n\n      if (!this.state.checked) {\n        this.setValid();\n      } else {\n        if (this.props.required) {\n          this.setInvalid(['Required']);\n        }\n      }\n    }\n  }, {\n    key: \"renderInput\",\n    value: function renderInput() {\n      return React.createElement(\"input\", {\n        disabled: this.getDisabled(),\n        type: \"checkbox\",\n        required: this.props.required,\n        checked: this.state.checked,\n        onChange: this.handleChecked,\n        onBlur: this.handleBlur,\n        onFocus: this.handleFocus\n      });\n    }\n  }]);\n\n  return CheckboxRaw;\n}(_BaseInput2.BaseInput);\n\nexports.CheckboxRaw = CheckboxRaw;\n\n_defineProperty(CheckboxRaw, \"defaultProps\", Object.assign({}, _BaseInput2.BaseInput.defaultProps, {\n  checked: false\n}));\n\nvar Checkbox = (0, _withFormContext.withFormContext)(CheckboxRaw);\nexports.Checkbox = Checkbox;\nvar _default = Checkbox;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}